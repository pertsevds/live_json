{
  "version": 3,
  "sources": ["../../assets/node_modules/jsondiffpatch/dist/empty.js", "../../assets/node_modules/jsondiffpatch/dist/jsondiffpatch.umd.js", "../../assets/js/live_json/index.js", "../../assets/node_modules/fast-json-patch/module/core.mjs", "../../assets/node_modules/fast-json-patch/module/helpers.mjs", "../../assets/node_modules/fast-json-patch/module/duplex.mjs", "../../assets/node_modules/fast-json-patch/index.mjs", "../../assets/js/live_json/live_json.js"],
  "sourcesContent": ["", "(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('./empty')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', './empty'], factory) :\n\t(factory((global.jsondiffpatch = {}),global.chalk));\n}(this, (function (exports,chalk) { 'use strict';\n\nchalk = chalk && chalk.hasOwnProperty('default') ? chalk['default'] : chalk;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n\n\n\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar Processor = function () {\n  function Processor(options) {\n    classCallCheck(this, Processor);\n\n    this.selfOptions = options || {};\n    this.pipes = {};\n  }\n\n  createClass(Processor, [{\n    key: 'options',\n    value: function options(_options) {\n      if (_options) {\n        this.selfOptions = _options;\n      }\n      return this.selfOptions;\n    }\n  }, {\n    key: 'pipe',\n    value: function pipe(name, pipeArg) {\n      var pipe = pipeArg;\n      if (typeof name === 'string') {\n        if (typeof pipe === 'undefined') {\n          return this.pipes[name];\n        } else {\n          this.pipes[name] = pipe;\n        }\n      }\n      if (name && name.name) {\n        pipe = name;\n        if (pipe.processor === this) {\n          return pipe;\n        }\n        this.pipes[pipe.name] = pipe;\n      }\n      pipe.processor = this;\n      return pipe;\n    }\n  }, {\n    key: 'process',\n    value: function process(input, pipe) {\n      var context = input;\n      context.options = this.options();\n      var nextPipe = pipe || input.pipe || 'default';\n      var lastPipe = void 0;\n      var lastContext = void 0;\n      while (nextPipe) {\n        if (typeof context.nextAfterChildren !== 'undefined') {\n          // children processed and coming back to parent\n          context.next = context.nextAfterChildren;\n          context.nextAfterChildren = null;\n        }\n\n        if (typeof nextPipe === 'string') {\n          nextPipe = this.pipe(nextPipe);\n        }\n        nextPipe.process(context);\n        lastContext = context;\n        lastPipe = nextPipe;\n        nextPipe = null;\n        if (context) {\n          if (context.next) {\n            context = context.next;\n            nextPipe = lastContext.nextPipe || context.pipe || lastPipe;\n          }\n        }\n      }\n      return context.hasResult ? context.result : undefined;\n    }\n  }]);\n  return Processor;\n}();\n\nvar Pipe = function () {\n  function Pipe(name) {\n    classCallCheck(this, Pipe);\n\n    this.name = name;\n    this.filters = [];\n  }\n\n  createClass(Pipe, [{\n    key: 'process',\n    value: function process(input) {\n      if (!this.processor) {\n        throw new Error('add this pipe to a processor before using it');\n      }\n      var debug = this.debug;\n      var length = this.filters.length;\n      var context = input;\n      for (var index = 0; index < length; index++) {\n        var filter = this.filters[index];\n        if (debug) {\n          this.log('filter: ' + filter.filterName);\n        }\n        filter(context);\n        if ((typeof context === 'undefined' ? 'undefined' : _typeof(context)) === 'object' && context.exiting) {\n          context.exiting = false;\n          break;\n        }\n      }\n      if (!context.next && this.resultCheck) {\n        this.resultCheck(context);\n      }\n    }\n  }, {\n    key: 'log',\n    value: function log(msg) {\n      console.log('[jsondiffpatch] ' + this.name + ' pipe, ' + msg);\n    }\n  }, {\n    key: 'append',\n    value: function append() {\n      var _filters;\n\n      (_filters = this.filters).push.apply(_filters, arguments);\n      return this;\n    }\n  }, {\n    key: 'prepend',\n    value: function prepend() {\n      var _filters2;\n\n      (_filters2 = this.filters).unshift.apply(_filters2, arguments);\n      return this;\n    }\n  }, {\n    key: 'indexOf',\n    value: function indexOf(filterName) {\n      if (!filterName) {\n        throw new Error('a filter name is required');\n      }\n      for (var index = 0; index < this.filters.length; index++) {\n        var filter = this.filters[index];\n        if (filter.filterName === filterName) {\n          return index;\n        }\n      }\n      throw new Error('filter not found: ' + filterName);\n    }\n  }, {\n    key: 'list',\n    value: function list() {\n      return this.filters.map(function (f) {\n        return f.filterName;\n      });\n    }\n  }, {\n    key: 'after',\n    value: function after(filterName) {\n      var index = this.indexOf(filterName);\n      var params = Array.prototype.slice.call(arguments, 1);\n      if (!params.length) {\n        throw new Error('a filter is required');\n      }\n      params.unshift(index + 1, 0);\n      Array.prototype.splice.apply(this.filters, params);\n      return this;\n    }\n  }, {\n    key: 'before',\n    value: function before(filterName) {\n      var index = this.indexOf(filterName);\n      var params = Array.prototype.slice.call(arguments, 1);\n      if (!params.length) {\n        throw new Error('a filter is required');\n      }\n      params.unshift(index, 0);\n      Array.prototype.splice.apply(this.filters, params);\n      return this;\n    }\n  }, {\n    key: 'replace',\n    value: function replace(filterName) {\n      var index = this.indexOf(filterName);\n      var params = Array.prototype.slice.call(arguments, 1);\n      if (!params.length) {\n        throw new Error('a filter is required');\n      }\n      params.unshift(index, 1);\n      Array.prototype.splice.apply(this.filters, params);\n      return this;\n    }\n  }, {\n    key: 'remove',\n    value: function remove(filterName) {\n      var index = this.indexOf(filterName);\n      this.filters.splice(index, 1);\n      return this;\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.filters.length = 0;\n      return this;\n    }\n  }, {\n    key: 'shouldHaveResult',\n    value: function shouldHaveResult(should) {\n      if (should === false) {\n        this.resultCheck = null;\n        return;\n      }\n      if (this.resultCheck) {\n        return;\n      }\n      var pipe = this;\n      this.resultCheck = function (context) {\n        if (!context.hasResult) {\n          console.log(context);\n          var error = new Error(pipe.name + ' failed');\n          error.noResult = true;\n          throw error;\n        }\n      };\n      return this;\n    }\n  }]);\n  return Pipe;\n}();\n\nvar Context = function () {\n  function Context() {\n    classCallCheck(this, Context);\n  }\n\n  createClass(Context, [{\n    key: 'setResult',\n    value: function setResult(result) {\n      this.result = result;\n      this.hasResult = true;\n      return this;\n    }\n  }, {\n    key: 'exit',\n    value: function exit() {\n      this.exiting = true;\n      return this;\n    }\n  }, {\n    key: 'switchTo',\n    value: function switchTo(next, pipe) {\n      if (typeof next === 'string' || next instanceof Pipe) {\n        this.nextPipe = next;\n      } else {\n        this.next = next;\n        if (pipe) {\n          this.nextPipe = pipe;\n        }\n      }\n      return this;\n    }\n  }, {\n    key: 'push',\n    value: function push(child, name) {\n      child.parent = this;\n      if (typeof name !== 'undefined') {\n        child.childName = name;\n      }\n      child.root = this.root || this;\n      child.options = child.options || this.options;\n      if (!this.children) {\n        this.children = [child];\n        this.nextAfterChildren = this.next || null;\n        this.next = child;\n      } else {\n        this.children[this.children.length - 1].next = child;\n        this.children.push(child);\n      }\n      child.next = this;\n      return this;\n    }\n  }]);\n  return Context;\n}();\n\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function (a) {\n  return a instanceof Array;\n};\n\nfunction cloneRegExp(re) {\n  var regexMatch = /^\\/(.*)\\/([gimyu]*)$/.exec(re.toString());\n  return new RegExp(regexMatch[1], regexMatch[2]);\n}\n\nfunction clone(arg) {\n  if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) !== 'object') {\n    return arg;\n  }\n  if (arg === null) {\n    return null;\n  }\n  if (isArray(arg)) {\n    return arg.map(clone);\n  }\n  if (arg instanceof Date) {\n    return new Date(arg.getTime());\n  }\n  if (arg instanceof RegExp) {\n    return cloneRegExp(arg);\n  }\n  var cloned = {};\n  for (var name in arg) {\n    if (Object.prototype.hasOwnProperty.call(arg, name)) {\n      cloned[name] = clone(arg[name]);\n    }\n  }\n  return cloned;\n}\n\nvar DiffContext = function (_Context) {\n  inherits(DiffContext, _Context);\n\n  function DiffContext(left, right) {\n    classCallCheck(this, DiffContext);\n\n    var _this = possibleConstructorReturn(this, (DiffContext.__proto__ || Object.getPrototypeOf(DiffContext)).call(this));\n\n    _this.left = left;\n    _this.right = right;\n    _this.pipe = 'diff';\n    return _this;\n  }\n\n  createClass(DiffContext, [{\n    key: 'setResult',\n    value: function setResult(result) {\n      if (this.options.cloneDiffValues && (typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {\n        var clone$$1 = typeof this.options.cloneDiffValues === 'function' ? this.options.cloneDiffValues : clone;\n        if (_typeof(result[0]) === 'object') {\n          result[0] = clone$$1(result[0]);\n        }\n        if (_typeof(result[1]) === 'object') {\n          result[1] = clone$$1(result[1]);\n        }\n      }\n      return Context.prototype.setResult.apply(this, arguments);\n    }\n  }]);\n  return DiffContext;\n}(Context);\n\nvar PatchContext = function (_Context) {\n  inherits(PatchContext, _Context);\n\n  function PatchContext(left, delta) {\n    classCallCheck(this, PatchContext);\n\n    var _this = possibleConstructorReturn(this, (PatchContext.__proto__ || Object.getPrototypeOf(PatchContext)).call(this));\n\n    _this.left = left;\n    _this.delta = delta;\n    _this.pipe = 'patch';\n    return _this;\n  }\n\n  return PatchContext;\n}(Context);\n\nvar ReverseContext = function (_Context) {\n  inherits(ReverseContext, _Context);\n\n  function ReverseContext(delta) {\n    classCallCheck(this, ReverseContext);\n\n    var _this = possibleConstructorReturn(this, (ReverseContext.__proto__ || Object.getPrototypeOf(ReverseContext)).call(this));\n\n    _this.delta = delta;\n    _this.pipe = 'reverse';\n    return _this;\n  }\n\n  return ReverseContext;\n}(Context);\n\nvar isArray$1 = typeof Array.isArray === 'function' ? Array.isArray : function (a) {\n  return a instanceof Array;\n};\n\nvar diffFilter = function trivialMatchesDiffFilter(context) {\n  if (context.left === context.right) {\n    context.setResult(undefined).exit();\n    return;\n  }\n  if (typeof context.left === 'undefined') {\n    if (typeof context.right === 'function') {\n      throw new Error('functions are not supported');\n    }\n    context.setResult([context.right]).exit();\n    return;\n  }\n  if (typeof context.right === 'undefined') {\n    context.setResult([context.left, 0, 0]).exit();\n    return;\n  }\n  if (typeof context.left === 'function' || typeof context.right === 'function') {\n    throw new Error('functions are not supported');\n  }\n  context.leftType = context.left === null ? 'null' : _typeof(context.left);\n  context.rightType = context.right === null ? 'null' : _typeof(context.right);\n  if (context.leftType !== context.rightType) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  if (context.leftType === 'boolean' || context.leftType === 'number') {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  if (context.leftType === 'object') {\n    context.leftIsArray = isArray$1(context.left);\n  }\n  if (context.rightType === 'object') {\n    context.rightIsArray = isArray$1(context.right);\n  }\n  if (context.leftIsArray !== context.rightIsArray) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n\n  if (context.left instanceof RegExp) {\n    if (context.right instanceof RegExp) {\n      context.setResult([context.left.toString(), context.right.toString()]).exit();\n    } else {\n      context.setResult([context.left, context.right]).exit();\n    }\n  }\n};\ndiffFilter.filterName = 'trivial';\n\nvar patchFilter = function trivialMatchesPatchFilter(context) {\n  if (typeof context.delta === 'undefined') {\n    context.setResult(context.left).exit();\n    return;\n  }\n  context.nested = !isArray$1(context.delta);\n  if (context.nested) {\n    return;\n  }\n  if (context.delta.length === 1) {\n    context.setResult(context.delta[0]).exit();\n    return;\n  }\n  if (context.delta.length === 2) {\n    if (context.left instanceof RegExp) {\n      var regexArgs = /^\\/(.*)\\/([gimyu]+)$/.exec(context.delta[1]);\n      if (regexArgs) {\n        context.setResult(new RegExp(regexArgs[1], regexArgs[2])).exit();\n        return;\n      }\n    }\n    context.setResult(context.delta[1]).exit();\n    return;\n  }\n  if (context.delta.length === 3 && context.delta[2] === 0) {\n    context.setResult(undefined).exit();\n  }\n};\npatchFilter.filterName = 'trivial';\n\nvar reverseFilter = function trivialReferseFilter(context) {\n  if (typeof context.delta === 'undefined') {\n    context.setResult(context.delta).exit();\n    return;\n  }\n  context.nested = !isArray$1(context.delta);\n  if (context.nested) {\n    return;\n  }\n  if (context.delta.length === 1) {\n    context.setResult([context.delta[0], 0, 0]).exit();\n    return;\n  }\n  if (context.delta.length === 2) {\n    context.setResult([context.delta[1], context.delta[0]]).exit();\n    return;\n  }\n  if (context.delta.length === 3 && context.delta[2] === 0) {\n    context.setResult([context.delta[0]]).exit();\n  }\n};\nreverseFilter.filterName = 'trivial';\n\nfunction collectChildrenDiffFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  var length = context.children.length;\n  var child = void 0;\n  var result = context.result;\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    if (typeof child.result === 'undefined') {\n      continue;\n    }\n    result = result || {};\n    result[child.childName] = child.result;\n  }\n  if (result && context.leftIsArray) {\n    result._t = 'a';\n  }\n  context.setResult(result).exit();\n}\ncollectChildrenDiffFilter.filterName = 'collectChildren';\n\nfunction objectsDiffFilter(context) {\n  if (context.leftIsArray || context.leftType !== 'object') {\n    return;\n  }\n\n  var name = void 0;\n  var child = void 0;\n  var propertyFilter = context.options.propertyFilter;\n  for (name in context.left) {\n    if (!Object.prototype.hasOwnProperty.call(context.left, name)) {\n      continue;\n    }\n    if (propertyFilter && !propertyFilter(name, context)) {\n      continue;\n    }\n    child = new DiffContext(context.left[name], context.right[name]);\n    context.push(child, name);\n  }\n  for (name in context.right) {\n    if (!Object.prototype.hasOwnProperty.call(context.right, name)) {\n      continue;\n    }\n    if (propertyFilter && !propertyFilter(name, context)) {\n      continue;\n    }\n    if (typeof context.left[name] === 'undefined') {\n      child = new DiffContext(undefined, context.right[name]);\n      context.push(child, name);\n    }\n  }\n\n  if (!context.children || context.children.length === 0) {\n    context.setResult(undefined).exit();\n    return;\n  }\n  context.exit();\n}\nobjectsDiffFilter.filterName = 'objects';\n\nvar patchFilter$1 = function nestedPatchFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var name = void 0;\n  var child = void 0;\n  for (name in context.delta) {\n    child = new PatchContext(context.left[name], context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\npatchFilter$1.filterName = 'objects';\n\nvar collectChildrenPatchFilter = function collectChildrenPatchFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var length = context.children.length;\n  var child = void 0;\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    if (Object.prototype.hasOwnProperty.call(context.left, child.childName) && child.result === undefined) {\n      delete context.left[child.childName];\n    } else if (context.left[child.childName] !== child.result) {\n      context.left[child.childName] = child.result;\n    }\n  }\n  context.setResult(context.left).exit();\n};\ncollectChildrenPatchFilter.filterName = 'collectChildren';\n\nvar reverseFilter$1 = function nestedReverseFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var name = void 0;\n  var child = void 0;\n  for (name in context.delta) {\n    child = new ReverseContext(context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\nreverseFilter$1.filterName = 'objects';\n\nfunction collectChildrenReverseFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var length = context.children.length;\n  var child = void 0;\n  var delta = {};\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    if (delta[child.childName] !== child.result) {\n      delta[child.childName] = child.result;\n    }\n  }\n  context.setResult(delta).exit();\n}\ncollectChildrenReverseFilter.filterName = 'collectChildren';\n\n/*\n\nLCS implementation that supports arrays or strings\n\nreference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n\n*/\n\nvar defaultMatch = function defaultMatch(array1, array2, index1, index2) {\n  return array1[index1] === array2[index2];\n};\n\nvar lengthMatrix = function lengthMatrix(array1, array2, match, context) {\n  var len1 = array1.length;\n  var len2 = array2.length;\n  var x = void 0,\n      y = void 0;\n\n  // initialize empty matrix of len1+1 x len2+1\n  var matrix = [len1 + 1];\n  for (x = 0; x < len1 + 1; x++) {\n    matrix[x] = [len2 + 1];\n    for (y = 0; y < len2 + 1; y++) {\n      matrix[x][y] = 0;\n    }\n  }\n  matrix.match = match;\n  // save sequence lengths for each coordinate\n  for (x = 1; x < len1 + 1; x++) {\n    for (y = 1; y < len2 + 1; y++) {\n      if (match(array1, array2, x - 1, y - 1, context)) {\n        matrix[x][y] = matrix[x - 1][y - 1] + 1;\n      } else {\n        matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1]);\n      }\n    }\n  }\n  return matrix;\n};\n\nvar backtrack = function backtrack(matrix, array1, array2, context) {\n  var index1 = array1.length;\n  var index2 = array2.length;\n  var subsequence = {\n    sequence: [],\n    indices1: [],\n    indices2: []\n  };\n\n  while (index1 !== 0 && index2 !== 0) {\n    var sameLetter = matrix.match(array1, array2, index1 - 1, index2 - 1, context);\n    if (sameLetter) {\n      subsequence.sequence.unshift(array1[index1 - 1]);\n      subsequence.indices1.unshift(index1 - 1);\n      subsequence.indices2.unshift(index2 - 1);\n      --index1;\n      --index2;\n    } else {\n      var valueAtMatrixAbove = matrix[index1][index2 - 1];\n      var valueAtMatrixLeft = matrix[index1 - 1][index2];\n      if (valueAtMatrixAbove > valueAtMatrixLeft) {\n        --index2;\n      } else {\n        --index1;\n      }\n    }\n  }\n  return subsequence;\n};\n\nvar get$1 = function get(array1, array2, match, context) {\n  var innerContext = context || {};\n  var matrix = lengthMatrix(array1, array2, match || defaultMatch, innerContext);\n  var result = backtrack(matrix, array1, array2, innerContext);\n  if (typeof array1 === 'string' && typeof array2 === 'string') {\n    result.sequence = result.sequence.join('');\n  }\n  return result;\n};\n\nvar lcs = {\n  get: get$1\n};\n\nvar ARRAY_MOVE = 3;\n\nvar isArray$2 = typeof Array.isArray === 'function' ? Array.isArray : function (a) {\n  return a instanceof Array;\n};\n\nvar arrayIndexOf = typeof Array.prototype.indexOf === 'function' ? function (array, item) {\n  return array.indexOf(item);\n} : function (array, item) {\n  var length = array.length;\n  for (var i = 0; i < length; i++) {\n    if (array[i] === item) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nfunction arraysHaveMatchByRef(array1, array2, len1, len2) {\n  for (var index1 = 0; index1 < len1; index1++) {\n    var val1 = array1[index1];\n    for (var index2 = 0; index2 < len2; index2++) {\n      var val2 = array2[index2];\n      if (index1 !== index2 && val1 === val2) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction matchItems(array1, array2, index1, index2, context) {\n  var value1 = array1[index1];\n  var value2 = array2[index2];\n  if (value1 === value2) {\n    return true;\n  }\n  if ((typeof value1 === 'undefined' ? 'undefined' : _typeof(value1)) !== 'object' || (typeof value2 === 'undefined' ? 'undefined' : _typeof(value2)) !== 'object') {\n    return false;\n  }\n  var objectHash = context.objectHash;\n  if (!objectHash) {\n    // no way to match objects was provided, try match by position\n    return context.matchByPosition && index1 === index2;\n  }\n  var hash1 = void 0;\n  var hash2 = void 0;\n  if (typeof index1 === 'number') {\n    context.hashCache1 = context.hashCache1 || [];\n    hash1 = context.hashCache1[index1];\n    if (typeof hash1 === 'undefined') {\n      context.hashCache1[index1] = hash1 = objectHash(value1, index1);\n    }\n  } else {\n    hash1 = objectHash(value1);\n  }\n  if (typeof hash1 === 'undefined') {\n    return false;\n  }\n  if (typeof index2 === 'number') {\n    context.hashCache2 = context.hashCache2 || [];\n    hash2 = context.hashCache2[index2];\n    if (typeof hash2 === 'undefined') {\n      context.hashCache2[index2] = hash2 = objectHash(value2, index2);\n    }\n  } else {\n    hash2 = objectHash(value2);\n  }\n  if (typeof hash2 === 'undefined') {\n    return false;\n  }\n  return hash1 === hash2;\n}\n\nvar diffFilter$1 = function arraysDiffFilter(context) {\n  if (!context.leftIsArray) {\n    return;\n  }\n\n  var matchContext = {\n    objectHash: context.options && context.options.objectHash,\n    matchByPosition: context.options && context.options.matchByPosition\n  };\n  var commonHead = 0;\n  var commonTail = 0;\n  var index = void 0;\n  var index1 = void 0;\n  var index2 = void 0;\n  var array1 = context.left;\n  var array2 = context.right;\n  var len1 = array1.length;\n  var len2 = array2.length;\n\n  var child = void 0;\n\n  if (len1 > 0 && len2 > 0 && !matchContext.objectHash && typeof matchContext.matchByPosition !== 'boolean') {\n    matchContext.matchByPosition = !arraysHaveMatchByRef(array1, array2, len1, len2);\n  }\n\n  // separate common head\n  while (commonHead < len1 && commonHead < len2 && matchItems(array1, array2, commonHead, commonHead, matchContext)) {\n    index = commonHead;\n    child = new DiffContext(context.left[index], context.right[index]);\n    context.push(child, index);\n    commonHead++;\n  }\n  // separate common tail\n  while (commonTail + commonHead < len1 && commonTail + commonHead < len2 && matchItems(array1, array2, len1 - 1 - commonTail, len2 - 1 - commonTail, matchContext)) {\n    index1 = len1 - 1 - commonTail;\n    index2 = len2 - 1 - commonTail;\n    child = new DiffContext(context.left[index1], context.right[index2]);\n    context.push(child, index2);\n    commonTail++;\n  }\n  var result = void 0;\n  if (commonHead + commonTail === len1) {\n    if (len1 === len2) {\n      // arrays are identical\n      context.setResult(undefined).exit();\n      return;\n    }\n    // trivial case, a block (1 or more consecutive items) was added\n    result = result || {\n      _t: 'a'\n    };\n    for (index = commonHead; index < len2 - commonTail; index++) {\n      result[index] = [array2[index]];\n    }\n    context.setResult(result).exit();\n    return;\n  }\n  if (commonHead + commonTail === len2) {\n    // trivial case, a block (1 or more consecutive items) was removed\n    result = result || {\n      _t: 'a'\n    };\n    for (index = commonHead; index < len1 - commonTail; index++) {\n      result['_' + index] = [array1[index], 0, 0];\n    }\n    context.setResult(result).exit();\n    return;\n  }\n  // reset hash cache\n  delete matchContext.hashCache1;\n  delete matchContext.hashCache2;\n\n  // diff is not trivial, find the LCS (Longest Common Subsequence)\n  var trimmed1 = array1.slice(commonHead, len1 - commonTail);\n  var trimmed2 = array2.slice(commonHead, len2 - commonTail);\n  var seq = lcs.get(trimmed1, trimmed2, matchItems, matchContext);\n  var removedItems = [];\n  result = result || {\n    _t: 'a'\n  };\n  for (index = commonHead; index < len1 - commonTail; index++) {\n    if (arrayIndexOf(seq.indices1, index - commonHead) < 0) {\n      // removed\n      result['_' + index] = [array1[index], 0, 0];\n      removedItems.push(index);\n    }\n  }\n\n  var detectMove = true;\n  if (context.options && context.options.arrays && context.options.arrays.detectMove === false) {\n    detectMove = false;\n  }\n  var includeValueOnMove = false;\n  if (context.options && context.options.arrays && context.options.arrays.includeValueOnMove) {\n    includeValueOnMove = true;\n  }\n\n  var removedItemsLength = removedItems.length;\n  for (index = commonHead; index < len2 - commonTail; index++) {\n    var indexOnArray2 = arrayIndexOf(seq.indices2, index - commonHead);\n    if (indexOnArray2 < 0) {\n      // added, try to match with a removed item and register as position move\n      var isMove = false;\n      if (detectMove && removedItemsLength > 0) {\n        for (var removeItemIndex1 = 0; removeItemIndex1 < removedItemsLength; removeItemIndex1++) {\n          index1 = removedItems[removeItemIndex1];\n          if (matchItems(trimmed1, trimmed2, index1 - commonHead, index - commonHead, matchContext)) {\n            // store position move as: [originalValue, newPosition, ARRAY_MOVE]\n            result['_' + index1].splice(1, 2, index, ARRAY_MOVE);\n            if (!includeValueOnMove) {\n              // don't include moved value on diff, to save bytes\n              result['_' + index1][0] = '';\n            }\n\n            index2 = index;\n            child = new DiffContext(context.left[index1], context.right[index2]);\n            context.push(child, index2);\n            removedItems.splice(removeItemIndex1, 1);\n            isMove = true;\n            break;\n          }\n        }\n      }\n      if (!isMove) {\n        // added\n        result[index] = [array2[index]];\n      }\n    } else {\n      // match, do inner diff\n      index1 = seq.indices1[indexOnArray2] + commonHead;\n      index2 = seq.indices2[indexOnArray2] + commonHead;\n      child = new DiffContext(context.left[index1], context.right[index2]);\n      context.push(child, index2);\n    }\n  }\n\n  context.setResult(result).exit();\n};\ndiffFilter$1.filterName = 'arrays';\n\nvar compare = {\n  numerically: function numerically(a, b) {\n    return a - b;\n  },\n  numericallyBy: function numericallyBy(name) {\n    return function (a, b) {\n      return a[name] - b[name];\n    };\n  }\n};\n\nvar patchFilter$2 = function nestedPatchFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var index = void 0;\n  var index1 = void 0;\n\n  var delta = context.delta;\n  var array = context.left;\n\n  // first, separate removals, insertions and modifications\n  var toRemove = [];\n  var toInsert = [];\n  var toModify = [];\n  for (index in delta) {\n    if (index !== '_t') {\n      if (index[0] === '_') {\n        // removed item from original array\n        if (delta[index][2] === 0 || delta[index][2] === ARRAY_MOVE) {\n          toRemove.push(parseInt(index.slice(1), 10));\n        } else {\n          throw new Error('only removal or move can be applied at original array indices,' + (' invalid diff type: ' + delta[index][2]));\n        }\n      } else {\n        if (delta[index].length === 1) {\n          // added item at new array\n          toInsert.push({\n            index: parseInt(index, 10),\n            value: delta[index][0]\n          });\n        } else {\n          // modified item at new array\n          toModify.push({\n            index: parseInt(index, 10),\n            delta: delta[index]\n          });\n        }\n      }\n    }\n  }\n\n  // remove items, in reverse order to avoid sawing our own floor\n  toRemove = toRemove.sort(compare.numerically);\n  for (index = toRemove.length - 1; index >= 0; index--) {\n    index1 = toRemove[index];\n    var indexDiff = delta['_' + index1];\n    var removedValue = array.splice(index1, 1)[0];\n    if (indexDiff[2] === ARRAY_MOVE) {\n      // reinsert later\n      toInsert.push({\n        index: indexDiff[1],\n        value: removedValue\n      });\n    }\n  }\n\n  // insert items, in reverse order to avoid moving our own floor\n  toInsert = toInsert.sort(compare.numericallyBy('index'));\n  var toInsertLength = toInsert.length;\n  for (index = 0; index < toInsertLength; index++) {\n    var insertion = toInsert[index];\n    array.splice(insertion.index, 0, insertion.value);\n  }\n\n  // apply modifications\n  var toModifyLength = toModify.length;\n  var child = void 0;\n  if (toModifyLength > 0) {\n    for (index = 0; index < toModifyLength; index++) {\n      var modification = toModify[index];\n      child = new PatchContext(context.left[modification.index], modification.delta);\n      context.push(child, modification.index);\n    }\n  }\n\n  if (!context.children) {\n    context.setResult(context.left).exit();\n    return;\n  }\n  context.exit();\n};\npatchFilter$2.filterName = 'arrays';\n\nvar collectChildrenPatchFilter$1 = function collectChildrenPatchFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var length = context.children.length;\n  var child = void 0;\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    context.left[child.childName] = child.result;\n  }\n  context.setResult(context.left).exit();\n};\ncollectChildrenPatchFilter$1.filterName = 'arraysCollectChildren';\n\nvar reverseFilter$2 = function arraysReverseFilter(context) {\n  if (!context.nested) {\n    if (context.delta[2] === ARRAY_MOVE) {\n      context.newName = '_' + context.delta[1];\n      context.setResult([context.delta[0], parseInt(context.childName.substr(1), 10), ARRAY_MOVE]).exit();\n    }\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var name = void 0;\n  var child = void 0;\n  for (name in context.delta) {\n    if (name === '_t') {\n      continue;\n    }\n    child = new ReverseContext(context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\nreverseFilter$2.filterName = 'arrays';\n\nvar reverseArrayDeltaIndex = function reverseArrayDeltaIndex(delta, index, itemDelta) {\n  if (typeof index === 'string' && index[0] === '_') {\n    return parseInt(index.substr(1), 10);\n  } else if (isArray$2(itemDelta) && itemDelta[2] === 0) {\n    return '_' + index;\n  }\n\n  var reverseIndex = +index;\n  for (var deltaIndex in delta) {\n    var deltaItem = delta[deltaIndex];\n    if (isArray$2(deltaItem)) {\n      if (deltaItem[2] === ARRAY_MOVE) {\n        var moveFromIndex = parseInt(deltaIndex.substr(1), 10);\n        var moveToIndex = deltaItem[1];\n        if (moveToIndex === +index) {\n          return moveFromIndex;\n        }\n        if (moveFromIndex <= reverseIndex && moveToIndex > reverseIndex) {\n          reverseIndex++;\n        } else if (moveFromIndex >= reverseIndex && moveToIndex < reverseIndex) {\n          reverseIndex--;\n        }\n      } else if (deltaItem[2] === 0) {\n        var deleteIndex = parseInt(deltaIndex.substr(1), 10);\n        if (deleteIndex <= reverseIndex) {\n          reverseIndex++;\n        }\n      } else if (deltaItem.length === 1 && deltaIndex <= reverseIndex) {\n        reverseIndex--;\n      }\n    }\n  }\n\n  return reverseIndex;\n};\n\nfunction collectChildrenReverseFilter$1(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var length = context.children.length;\n  var child = void 0;\n  var delta = {\n    _t: 'a'\n  };\n\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    var name = child.newName;\n    if (typeof name === 'undefined') {\n      name = reverseArrayDeltaIndex(context.delta, child.childName, child.result);\n    }\n    if (delta[name] !== child.result) {\n      delta[name] = child.result;\n    }\n  }\n  context.setResult(delta).exit();\n}\ncollectChildrenReverseFilter$1.filterName = 'arraysCollectChildren';\n\nvar diffFilter$2 = function datesDiffFilter(context) {\n  if (context.left instanceof Date) {\n    if (context.right instanceof Date) {\n      if (context.left.getTime() !== context.right.getTime()) {\n        context.setResult([context.left, context.right]);\n      } else {\n        context.setResult(undefined);\n      }\n    } else {\n      context.setResult([context.left, context.right]);\n    }\n    context.exit();\n  } else if (context.right instanceof Date) {\n    context.setResult([context.left, context.right]).exit();\n  }\n};\ndiffFilter$2.filterName = 'dates';\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar diffMatchPatch = createCommonjsModule(function (module) {\n/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nfunction diff_match_patch() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n}\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/** @typedef {{0: number, 1: string}} */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push([DIFF_EQUAL, '']);\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var a = this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = a.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, a[j]);\n          }\n          pointer = pointer + a.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n    return chars;\n  }\n\n  var chars1 = diff_linesToCharsMunge_(text1);\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var x = 0; x < diffs.length; x++) {\n    var chars = diffs[x][1];\n    var text = [];\n    for (var y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastequality && (lastequality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastequality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastequality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastequality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastequality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastequality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\n        } else {\n          diffs[diffsLength++] = [DIFF_DELETE, text];\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] = patch.diffs[y].slice();\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push([DIFF_EQUAL, precontext]);\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push([diff_type, diff_text]);\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diff_type, diff_text]);\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postcontext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push([DIFF_DELETE, line]);\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push([DIFF_INSERT, line]);\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push([DIFF_EQUAL, line]);\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emmulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indicies are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;\n});\n\n/* global diff_match_patch */\nvar TEXT_DIFF = 2;\nvar DEFAULT_MIN_LENGTH = 60;\nvar cachedDiffPatch = null;\n\nvar getDiffMatchPatch = function getDiffMatchPatch(required) {\n  /* jshint camelcase: false */\n\n  if (!cachedDiffPatch) {\n    var instance = void 0;\n    /* eslint-disable camelcase, new-cap */\n    if (typeof diff_match_patch !== 'undefined') {\n      // already loaded, probably a browser\n      instance = typeof diff_match_patch === 'function' ? new diff_match_patch() : new diff_match_patch.diff_match_patch();\n    } else if (diffMatchPatch) {\n      try {\n        instance = diffMatchPatch && new diffMatchPatch();\n      } catch (err) {\n        instance = null;\n      }\n    }\n    /* eslint-enable camelcase, new-cap */\n    if (!instance) {\n      if (!required) {\n        return null;\n      }\n      var error = new Error('text diff_match_patch library not found');\n      // eslint-disable-next-line camelcase\n      error.diff_match_patch_not_found = true;\n      throw error;\n    }\n    cachedDiffPatch = {\n      diff: function diff(txt1, txt2) {\n        return instance.patch_toText(instance.patch_make(txt1, txt2));\n      },\n      patch: function patch(txt1, _patch) {\n        var results = instance.patch_apply(instance.patch_fromText(_patch), txt1);\n        for (var i = 0; i < results[1].length; i++) {\n          if (!results[1][i]) {\n            var _error = new Error('text patch failed');\n            _error.textPatchFailed = true;\n          }\n        }\n        return results[0];\n      }\n    };\n  }\n  return cachedDiffPatch;\n};\n\nvar diffFilter$3 = function textsDiffFilter(context) {\n  if (context.leftType !== 'string') {\n    return;\n  }\n  var minLength = context.options && context.options.textDiff && context.options.textDiff.minLength || DEFAULT_MIN_LENGTH;\n  if (context.left.length < minLength || context.right.length < minLength) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  // large text, try to use a text-diff algorithm\n  var diffMatchPatch$$1 = getDiffMatchPatch();\n  if (!diffMatchPatch$$1) {\n    // diff-match-patch library not available,\n    // fallback to regular string replace\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  var diff = diffMatchPatch$$1.diff;\n  context.setResult([diff(context.left, context.right), 0, TEXT_DIFF]).exit();\n};\ndiffFilter$3.filterName = 'texts';\n\nvar patchFilter$3 = function textsPatchFilter(context) {\n  if (context.nested) {\n    return;\n  }\n  if (context.delta[2] !== TEXT_DIFF) {\n    return;\n  }\n\n  // text-diff, use a text-patch algorithm\n  var patch = getDiffMatchPatch(true).patch;\n  context.setResult(patch(context.left, context.delta[0])).exit();\n};\npatchFilter$3.filterName = 'texts';\n\nvar textDeltaReverse = function textDeltaReverse(delta) {\n  var i = void 0;\n  var l = void 0;\n  var lines = void 0;\n  var line = void 0;\n  var lineTmp = void 0;\n  var header = null;\n  var headerRegex = /^@@ +-(\\d+),(\\d+) +\\+(\\d+),(\\d+) +@@$/;\n  var lineHeader = void 0;\n  lines = delta.split('\\n');\n  for (i = 0, l = lines.length; i < l; i++) {\n    line = lines[i];\n    var lineStart = line.slice(0, 1);\n    if (lineStart === '@') {\n      header = headerRegex.exec(line);\n      lineHeader = i;\n\n      // fix header\n      lines[lineHeader] = '@@ -' + header[3] + ',' + header[4] + ' +' + header[1] + ',' + header[2] + ' @@';\n    } else if (lineStart === '+') {\n      lines[i] = '-' + lines[i].slice(1);\n      if (lines[i - 1].slice(0, 1) === '+') {\n        // swap lines to keep default order (-+)\n        lineTmp = lines[i];\n        lines[i] = lines[i - 1];\n        lines[i - 1] = lineTmp;\n      }\n    } else if (lineStart === '-') {\n      lines[i] = '+' + lines[i].slice(1);\n    }\n  }\n  return lines.join('\\n');\n};\n\nvar reverseFilter$3 = function textsReverseFilter(context) {\n  if (context.nested) {\n    return;\n  }\n  if (context.delta[2] !== TEXT_DIFF) {\n    return;\n  }\n\n  // text-diff, use a text-diff algorithm\n  context.setResult([textDeltaReverse(context.delta[0]), 0, TEXT_DIFF]).exit();\n};\nreverseFilter$3.filterName = 'texts';\n\nvar DiffPatcher = function () {\n  function DiffPatcher(options) {\n    classCallCheck(this, DiffPatcher);\n\n    this.processor = new Processor(options);\n    this.processor.pipe(new Pipe('diff').append(collectChildrenDiffFilter, diffFilter, diffFilter$2, diffFilter$3, objectsDiffFilter, diffFilter$1).shouldHaveResult());\n    this.processor.pipe(new Pipe('patch').append(collectChildrenPatchFilter, collectChildrenPatchFilter$1, patchFilter, patchFilter$3, patchFilter$1, patchFilter$2).shouldHaveResult());\n    this.processor.pipe(new Pipe('reverse').append(collectChildrenReverseFilter, collectChildrenReverseFilter$1, reverseFilter, reverseFilter$3, reverseFilter$1, reverseFilter$2).shouldHaveResult());\n  }\n\n  createClass(DiffPatcher, [{\n    key: 'options',\n    value: function options() {\n      var _processor;\n\n      return (_processor = this.processor).options.apply(_processor, arguments);\n    }\n  }, {\n    key: 'diff',\n    value: function diff(left, right) {\n      return this.processor.process(new DiffContext(left, right));\n    }\n  }, {\n    key: 'patch',\n    value: function patch(left, delta) {\n      return this.processor.process(new PatchContext(left, delta));\n    }\n  }, {\n    key: 'reverse',\n    value: function reverse(delta) {\n      return this.processor.process(new ReverseContext(delta));\n    }\n  }, {\n    key: 'unpatch',\n    value: function unpatch(right, delta) {\n      return this.patch(right, this.reverse(delta));\n    }\n  }, {\n    key: 'clone',\n    value: function clone$$1(value) {\n      return clone(value);\n    }\n  }]);\n  return DiffPatcher;\n}();\n\nvar isArray$3 = typeof Array.isArray === 'function' ? Array.isArray : function (a) {\n  return a instanceof Array;\n};\n\nvar getObjectKeys = typeof Object.keys === 'function' ? function (obj) {\n  return Object.keys(obj);\n} : function (obj) {\n  var names = [];\n  for (var property in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, property)) {\n      names.push(property);\n    }\n  }\n  return names;\n};\n\nvar trimUnderscore = function trimUnderscore(str) {\n  if (str.substr(0, 1) === '_') {\n    return str.slice(1);\n  }\n  return str;\n};\n\nvar arrayKeyToSortNumber = function arrayKeyToSortNumber(key) {\n  if (key === '_t') {\n    return -1;\n  } else {\n    if (key.substr(0, 1) === '_') {\n      return parseInt(key.slice(1), 10);\n    } else {\n      return parseInt(key, 10) + 0.1;\n    }\n  }\n};\n\nvar arrayKeyComparer = function arrayKeyComparer(key1, key2) {\n  return arrayKeyToSortNumber(key1) - arrayKeyToSortNumber(key2);\n};\n\nvar BaseFormatter = function () {\n  function BaseFormatter() {\n    classCallCheck(this, BaseFormatter);\n  }\n\n  createClass(BaseFormatter, [{\n    key: 'format',\n    value: function format(delta, left) {\n      var context = {};\n      this.prepareContext(context);\n      this.recurse(context, delta, left);\n      return this.finalize(context);\n    }\n  }, {\n    key: 'prepareContext',\n    value: function prepareContext(context) {\n      context.buffer = [];\n      context.out = function () {\n        var _buffer;\n\n        (_buffer = this.buffer).push.apply(_buffer, arguments);\n      };\n    }\n  }, {\n    key: 'typeFormattterNotFound',\n    value: function typeFormattterNotFound(context, deltaType) {\n      throw new Error('cannot format delta type: ' + deltaType);\n    }\n  }, {\n    key: 'typeFormattterErrorFormatter',\n    value: function typeFormattterErrorFormatter(context, err) {\n      return err.toString();\n    }\n  }, {\n    key: 'finalize',\n    value: function finalize(_ref) {\n      var buffer = _ref.buffer;\n\n      if (isArray$3(buffer)) {\n        return buffer.join('');\n      }\n    }\n  }, {\n    key: 'recurse',\n    value: function recurse(context, delta, left, key, leftKey, movedFrom, isLast) {\n      var useMoveOriginHere = delta && movedFrom;\n      var leftValue = useMoveOriginHere ? movedFrom.value : left;\n\n      if (typeof delta === 'undefined' && typeof key === 'undefined') {\n        return undefined;\n      }\n\n      var type = this.getDeltaType(delta, movedFrom);\n      var nodeType = type === 'node' ? delta._t === 'a' ? 'array' : 'object' : '';\n\n      if (typeof key !== 'undefined') {\n        this.nodeBegin(context, key, leftKey, type, nodeType, isLast);\n      } else {\n        this.rootBegin(context, type, nodeType);\n      }\n\n      var typeFormattter = void 0;\n      try {\n        typeFormattter = this['format_' + type] || this.typeFormattterNotFound(context, type);\n        typeFormattter.call(this, context, delta, leftValue, key, leftKey, movedFrom);\n      } catch (err) {\n        this.typeFormattterErrorFormatter(context, err, delta, leftValue, key, leftKey, movedFrom);\n        if (typeof console !== 'undefined' && console.error) {\n          console.error(err.stack);\n        }\n      }\n\n      if (typeof key !== 'undefined') {\n        this.nodeEnd(context, key, leftKey, type, nodeType, isLast);\n      } else {\n        this.rootEnd(context, type, nodeType);\n      }\n    }\n  }, {\n    key: 'formatDeltaChildren',\n    value: function formatDeltaChildren(context, delta, left) {\n      var self = this;\n      this.forEachDeltaKey(delta, left, function (key, leftKey, movedFrom, isLast) {\n        self.recurse(context, delta[key], left ? left[leftKey] : undefined, key, leftKey, movedFrom, isLast);\n      });\n    }\n  }, {\n    key: 'forEachDeltaKey',\n    value: function forEachDeltaKey(delta, left, fn) {\n      var keys = getObjectKeys(delta);\n      var arrayKeys = delta._t === 'a';\n      var moveDestinations = {};\n      var name = void 0;\n      if (typeof left !== 'undefined') {\n        for (name in left) {\n          if (Object.prototype.hasOwnProperty.call(left, name)) {\n            if (typeof delta[name] === 'undefined' && (!arrayKeys || typeof delta['_' + name] === 'undefined')) {\n              keys.push(name);\n            }\n          }\n        }\n      }\n      // look for move destinations\n      for (name in delta) {\n        if (Object.prototype.hasOwnProperty.call(delta, name)) {\n          var value = delta[name];\n          if (isArray$3(value) && value[2] === 3) {\n            moveDestinations[value[1].toString()] = {\n              key: name,\n              value: left && left[parseInt(name.substr(1))]\n            };\n            if (this.includeMoveDestinations !== false) {\n              if (typeof left === 'undefined' && typeof delta[value[1]] === 'undefined') {\n                keys.push(value[1].toString());\n              }\n            }\n          }\n        }\n      }\n      if (arrayKeys) {\n        keys.sort(arrayKeyComparer);\n      } else {\n        keys.sort();\n      }\n      for (var index = 0, length = keys.length; index < length; index++) {\n        var key = keys[index];\n        if (arrayKeys && key === '_t') {\n          continue;\n        }\n        var leftKey = arrayKeys ? typeof key === 'number' ? key : parseInt(trimUnderscore(key), 10) : key;\n        var isLast = index === length - 1;\n        fn(key, leftKey, moveDestinations[leftKey], isLast);\n      }\n    }\n  }, {\n    key: 'getDeltaType',\n    value: function getDeltaType(delta, movedFrom) {\n      if (typeof delta === 'undefined') {\n        if (typeof movedFrom !== 'undefined') {\n          return 'movedestination';\n        }\n        return 'unchanged';\n      }\n      if (isArray$3(delta)) {\n        if (delta.length === 1) {\n          return 'added';\n        }\n        if (delta.length === 2) {\n          return 'modified';\n        }\n        if (delta.length === 3 && delta[2] === 0) {\n          return 'deleted';\n        }\n        if (delta.length === 3 && delta[2] === 2) {\n          return 'textdiff';\n        }\n        if (delta.length === 3 && delta[2] === 3) {\n          return 'moved';\n        }\n      } else if ((typeof delta === 'undefined' ? 'undefined' : _typeof(delta)) === 'object') {\n        return 'node';\n      }\n      return 'unknown';\n    }\n  }, {\n    key: 'parseTextDiff',\n    value: function parseTextDiff(value) {\n      var output = [];\n      var lines = value.split('\\n@@ ');\n      for (var i = 0, l = lines.length; i < l; i++) {\n        var line = lines[i];\n        var lineOutput = {\n          pieces: []\n        };\n        var location = /^(?:@@ )?[-+]?(\\d+),(\\d+)/.exec(line).slice(1);\n        lineOutput.location = {\n          line: location[0],\n          chr: location[1]\n        };\n        var pieces = line.split('\\n').slice(1);\n        for (var pieceIndex = 0, piecesLength = pieces.length; pieceIndex < piecesLength; pieceIndex++) {\n          var piece = pieces[pieceIndex];\n          if (!piece.length) {\n            continue;\n          }\n          var pieceOutput = {\n            type: 'context'\n          };\n          if (piece.substr(0, 1) === '+') {\n            pieceOutput.type = 'added';\n          } else if (piece.substr(0, 1) === '-') {\n            pieceOutput.type = 'deleted';\n          }\n          pieceOutput.text = piece.slice(1);\n          lineOutput.pieces.push(pieceOutput);\n        }\n        output.push(lineOutput);\n      }\n      return output;\n    }\n  }]);\n  return BaseFormatter;\n}();\n\n\n\nvar base = Object.freeze({\n\tdefault: BaseFormatter\n});\n\nvar HtmlFormatter = function (_BaseFormatter) {\n  inherits(HtmlFormatter, _BaseFormatter);\n\n  function HtmlFormatter() {\n    classCallCheck(this, HtmlFormatter);\n    return possibleConstructorReturn(this, (HtmlFormatter.__proto__ || Object.getPrototypeOf(HtmlFormatter)).apply(this, arguments));\n  }\n\n  createClass(HtmlFormatter, [{\n    key: 'typeFormattterErrorFormatter',\n    value: function typeFormattterErrorFormatter(context, err) {\n      context.out('<pre class=\"jsondiffpatch-error\">' + err + '</pre>');\n    }\n  }, {\n    key: 'formatValue',\n    value: function formatValue(context, value) {\n      context.out('<pre>' + htmlEscape(JSON.stringify(value, null, 2)) + '</pre>');\n    }\n  }, {\n    key: 'formatTextDiffString',\n    value: function formatTextDiffString(context, value) {\n      var lines = this.parseTextDiff(value);\n      context.out('<ul class=\"jsondiffpatch-textdiff\">');\n      for (var i = 0, l = lines.length; i < l; i++) {\n        var line = lines[i];\n        context.out('<li><div class=\"jsondiffpatch-textdiff-location\">' + ('<span class=\"jsondiffpatch-textdiff-line-number\">' + line.location.line + '</span><span class=\"jsondiffpatch-textdiff-char\">' + line.location.chr + '</span></div><div class=\"jsondiffpatch-textdiff-line\">'));\n        var pieces = line.pieces;\n        for (var pieceIndex = 0, piecesLength = pieces.length; pieceIndex < piecesLength; pieceIndex++) {\n          /* global decodeURI */\n          var piece = pieces[pieceIndex];\n          context.out('<span class=\"jsondiffpatch-textdiff-' + piece.type + '\">' + htmlEscape(decodeURI(piece.text)) + '</span>');\n        }\n        context.out('</div></li>');\n      }\n      context.out('</ul>');\n    }\n  }, {\n    key: 'rootBegin',\n    value: function rootBegin(context, type, nodeType) {\n      var nodeClass = 'jsondiffpatch-' + type + (nodeType ? ' jsondiffpatch-child-node-type-' + nodeType : '');\n      context.out('<div class=\"jsondiffpatch-delta ' + nodeClass + '\">');\n    }\n  }, {\n    key: 'rootEnd',\n    value: function rootEnd(context) {\n      context.out('</div>' + (context.hasArrows ? '<script type=\"text/javascript\">setTimeout(' + (adjustArrows.toString() + ',10);</script>') : ''));\n    }\n  }, {\n    key: 'nodeBegin',\n    value: function nodeBegin(context, key, leftKey, type, nodeType) {\n      var nodeClass = 'jsondiffpatch-' + type + (nodeType ? ' jsondiffpatch-child-node-type-' + nodeType : '');\n      context.out('<li class=\"' + nodeClass + '\" data-key=\"' + leftKey + '\">' + ('<div class=\"jsondiffpatch-property-name\">' + leftKey + '</div>'));\n    }\n  }, {\n    key: 'nodeEnd',\n    value: function nodeEnd(context) {\n      context.out('</li>');\n    }\n\n    /* jshint camelcase: false */\n    /* eslint-disable camelcase */\n\n  }, {\n    key: 'format_unchanged',\n    value: function format_unchanged(context, delta, left) {\n      if (typeof left === 'undefined') {\n        return;\n      }\n      context.out('<div class=\"jsondiffpatch-value\">');\n      this.formatValue(context, left);\n      context.out('</div>');\n    }\n  }, {\n    key: 'format_movedestination',\n    value: function format_movedestination(context, delta, left) {\n      if (typeof left === 'undefined') {\n        return;\n      }\n      context.out('<div class=\"jsondiffpatch-value\">');\n      this.formatValue(context, left);\n      context.out('</div>');\n    }\n  }, {\n    key: 'format_node',\n    value: function format_node(context, delta, left) {\n      // recurse\n      var nodeType = delta._t === 'a' ? 'array' : 'object';\n      context.out('<ul class=\"jsondiffpatch-node jsondiffpatch-node-type-' + nodeType + '\">');\n      this.formatDeltaChildren(context, delta, left);\n      context.out('</ul>');\n    }\n  }, {\n    key: 'format_added',\n    value: function format_added(context, delta) {\n      context.out('<div class=\"jsondiffpatch-value\">');\n      this.formatValue(context, delta[0]);\n      context.out('</div>');\n    }\n  }, {\n    key: 'format_modified',\n    value: function format_modified(context, delta) {\n      context.out('<div class=\"jsondiffpatch-value jsondiffpatch-left-value\">');\n      this.formatValue(context, delta[0]);\n      context.out('</div>' + '<div class=\"jsondiffpatch-value jsondiffpatch-right-value\">');\n      this.formatValue(context, delta[1]);\n      context.out('</div>');\n    }\n  }, {\n    key: 'format_deleted',\n    value: function format_deleted(context, delta) {\n      context.out('<div class=\"jsondiffpatch-value\">');\n      this.formatValue(context, delta[0]);\n      context.out('</div>');\n    }\n  }, {\n    key: 'format_moved',\n    value: function format_moved(context, delta) {\n      context.out('<div class=\"jsondiffpatch-value\">');\n      this.formatValue(context, delta[0]);\n      context.out('</div><div class=\"jsondiffpatch-moved-destination\">' + delta[1] + '</div>');\n\n      // draw an SVG arrow from here to move destination\n      context.out(\n      /* jshint multistr: true */\n      '<div class=\"jsondiffpatch-arrow\" ' + 'style=\"position: relative; left: -34px;\">\\n          <svg width=\"30\" height=\"60\" ' + 'style=\"position: absolute; display: none;\">\\n          <defs>\\n              <marker id=\"markerArrow\" markerWidth=\"8\" markerHeight=\"8\"\\n                 refx=\"2\" refy=\"4\"\\n                     orient=\"auto\" markerUnits=\"userSpaceOnUse\">\\n                  <path d=\"M1,1 L1,7 L7,4 L1,1\" style=\"fill: #339;\" />\\n              </marker>\\n          </defs>\\n          <path d=\"M30,0 Q-10,25 26,50\"\\n            style=\"stroke: #88f; stroke-width: 2px; fill: none; ' + 'stroke-opacity: 0.5; marker-end: url(#markerArrow);\"\\n          ></path>\\n          </svg>\\n      </div>');\n      context.hasArrows = true;\n    }\n  }, {\n    key: 'format_textdiff',\n    value: function format_textdiff(context, delta) {\n      context.out('<div class=\"jsondiffpatch-value\">');\n      this.formatTextDiffString(context, delta[0]);\n      context.out('</div>');\n    }\n  }]);\n  return HtmlFormatter;\n}(BaseFormatter);\n\nfunction htmlEscape(text) {\n  var html = text;\n  var replacements = [[/&/g, '&amp;'], [/</g, '&lt;'], [/>/g, '&gt;'], [/'/g, '&apos;'], [/\"/g, '&quot;']];\n  for (var i = 0; i < replacements.length; i++) {\n    html = html.replace(replacements[i][0], replacements[i][1]);\n  }\n  return html;\n}\n\nvar adjustArrows = function jsondiffpatchHtmlFormatterAdjustArrows(nodeArg) {\n  var node = nodeArg || document;\n  var getElementText = function getElementText(_ref) {\n    var textContent = _ref.textContent,\n        innerText = _ref.innerText;\n    return textContent || innerText;\n  };\n  var eachByQuery = function eachByQuery(el, query, fn) {\n    var elems = el.querySelectorAll(query);\n    for (var i = 0, l = elems.length; i < l; i++) {\n      fn(elems[i]);\n    }\n  };\n  var eachChildren = function eachChildren(_ref2, fn) {\n    var children = _ref2.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      fn(children[i], i);\n    }\n  };\n  eachByQuery(node, '.jsondiffpatch-arrow', function (_ref3) {\n    var parentNode = _ref3.parentNode,\n        children = _ref3.children,\n        style = _ref3.style;\n\n    var arrowParent = parentNode;\n    var svg = children[0];\n    var path = svg.children[1];\n    svg.style.display = 'none';\n    var destination = getElementText(arrowParent.querySelector('.jsondiffpatch-moved-destination'));\n    var container = arrowParent.parentNode;\n    var destinationElem = void 0;\n    eachChildren(container, function (child) {\n      if (child.getAttribute('data-key') === destination) {\n        destinationElem = child;\n      }\n    });\n    if (!destinationElem) {\n      return;\n    }\n    try {\n      var distance = destinationElem.offsetTop - arrowParent.offsetTop;\n      svg.setAttribute('height', Math.abs(distance) + 6);\n      style.top = -8 + (distance > 0 ? 0 : distance) + 'px';\n      var curve = distance > 0 ? 'M30,0 Q-10,' + Math.round(distance / 2) + ' 26,' + (distance - 4) : 'M30,' + -distance + ' Q-10,' + Math.round(-distance / 2) + ' 26,4';\n      path.setAttribute('d', curve);\n      svg.style.display = '';\n    } catch (err) {}\n  });\n};\n\n/* jshint camelcase: true */\n/* eslint-enable camelcase */\n\nvar showUnchanged = function showUnchanged(show, node, delay) {\n  var el = node || document.body;\n  var prefix = 'jsondiffpatch-unchanged-';\n  var classes = {\n    showing: prefix + 'showing',\n    hiding: prefix + 'hiding',\n    visible: prefix + 'visible',\n    hidden: prefix + 'hidden'\n  };\n  var list = el.classList;\n  if (!list) {\n    return;\n  }\n  if (!delay) {\n    list.remove(classes.showing);\n    list.remove(classes.hiding);\n    list.remove(classes.visible);\n    list.remove(classes.hidden);\n    if (show === false) {\n      list.add(classes.hidden);\n    }\n    return;\n  }\n  if (show === false) {\n    list.remove(classes.showing);\n    list.add(classes.visible);\n    setTimeout(function () {\n      list.add(classes.hiding);\n    }, 10);\n  } else {\n    list.remove(classes.hiding);\n    list.add(classes.showing);\n    list.remove(classes.hidden);\n  }\n  var intervalId = setInterval(function () {\n    adjustArrows(el);\n  }, 100);\n  setTimeout(function () {\n    list.remove(classes.showing);\n    list.remove(classes.hiding);\n    if (show === false) {\n      list.add(classes.hidden);\n      list.remove(classes.visible);\n    } else {\n      list.add(classes.visible);\n      list.remove(classes.hidden);\n    }\n    setTimeout(function () {\n      list.remove(classes.visible);\n      clearInterval(intervalId);\n    }, delay + 400);\n  }, delay);\n};\n\nvar hideUnchanged = function hideUnchanged(node, delay) {\n  return showUnchanged(false, node, delay);\n};\n\nvar defaultInstance = void 0;\n\nfunction format(delta, left) {\n  if (!defaultInstance) {\n    defaultInstance = new HtmlFormatter();\n  }\n  return defaultInstance.format(delta, left);\n}\n\n\n\nvar html = Object.freeze({\n\tshowUnchanged: showUnchanged,\n\thideUnchanged: hideUnchanged,\n\tdefault: HtmlFormatter,\n\tformat: format\n});\n\nvar AnnotatedFormatter = function (_BaseFormatter) {\n  inherits(AnnotatedFormatter, _BaseFormatter);\n\n  function AnnotatedFormatter() {\n    classCallCheck(this, AnnotatedFormatter);\n\n    var _this = possibleConstructorReturn(this, (AnnotatedFormatter.__proto__ || Object.getPrototypeOf(AnnotatedFormatter)).call(this));\n\n    _this.includeMoveDestinations = false;\n    return _this;\n  }\n\n  createClass(AnnotatedFormatter, [{\n    key: 'prepareContext',\n    value: function prepareContext(context) {\n      get(AnnotatedFormatter.prototype.__proto__ || Object.getPrototypeOf(AnnotatedFormatter.prototype), 'prepareContext', this).call(this, context);\n      context.indent = function (levels) {\n        this.indentLevel = (this.indentLevel || 0) + (typeof levels === 'undefined' ? 1 : levels);\n        this.indentPad = new Array(this.indentLevel + 1).join('&nbsp;&nbsp;');\n      };\n      context.row = function (json, htmlNote) {\n        context.out('<tr><td style=\"white-space: nowrap;\">' + '<pre class=\"jsondiffpatch-annotated-indent\"' + ' style=\"display: inline-block\">');\n        context.out(context.indentPad);\n        context.out('</pre><pre style=\"display: inline-block\">');\n        context.out(json);\n        context.out('</pre></td><td class=\"jsondiffpatch-delta-note\"><div>');\n        context.out(htmlNote);\n        context.out('</div></td></tr>');\n      };\n    }\n  }, {\n    key: 'typeFormattterErrorFormatter',\n    value: function typeFormattterErrorFormatter(context, err) {\n      context.row('', '<pre class=\"jsondiffpatch-error\">' + err + '</pre>');\n    }\n  }, {\n    key: 'formatTextDiffString',\n    value: function formatTextDiffString(context, value) {\n      var lines = this.parseTextDiff(value);\n      context.out('<ul class=\"jsondiffpatch-textdiff\">');\n      for (var i = 0, l = lines.length; i < l; i++) {\n        var line = lines[i];\n        context.out('<li><div class=\"jsondiffpatch-textdiff-location\">' + ('<span class=\"jsondiffpatch-textdiff-line-number\">' + line.location.line + '</span><span class=\"jsondiffpatch-textdiff-char\">' + line.location.chr + '</span></div><div class=\"jsondiffpatch-textdiff-line\">'));\n        var pieces = line.pieces;\n        for (var pieceIndex = 0, piecesLength = pieces.length; pieceIndex < piecesLength; pieceIndex++) {\n          var piece = pieces[pieceIndex];\n          context.out('<span class=\"jsondiffpatch-textdiff-' + piece.type + '\">' + piece.text + '</span>');\n        }\n        context.out('</div></li>');\n      }\n      context.out('</ul>');\n    }\n  }, {\n    key: 'rootBegin',\n    value: function rootBegin(context, type, nodeType) {\n      context.out('<table class=\"jsondiffpatch-annotated-delta\">');\n      if (type === 'node') {\n        context.row('{');\n        context.indent();\n      }\n      if (nodeType === 'array') {\n        context.row('\"_t\": \"a\",', 'Array delta (member names indicate array indices)');\n      }\n    }\n  }, {\n    key: 'rootEnd',\n    value: function rootEnd(context, type) {\n      if (type === 'node') {\n        context.indent(-1);\n        context.row('}');\n      }\n      context.out('</table>');\n    }\n  }, {\n    key: 'nodeBegin',\n    value: function nodeBegin(context, key, leftKey, type, nodeType) {\n      context.row('&quot;' + key + '&quot;: {');\n      if (type === 'node') {\n        context.indent();\n      }\n      if (nodeType === 'array') {\n        context.row('\"_t\": \"a\",', 'Array delta (member names indicate array indices)');\n      }\n    }\n  }, {\n    key: 'nodeEnd',\n    value: function nodeEnd(context, key, leftKey, type, nodeType, isLast) {\n      if (type === 'node') {\n        context.indent(-1);\n      }\n      context.row('}' + (isLast ? '' : ','));\n    }\n\n    /* jshint camelcase: false */\n\n    /* eslint-disable camelcase */\n\n  }, {\n    key: 'format_unchanged',\n    value: function format_unchanged() {}\n  }, {\n    key: 'format_movedestination',\n    value: function format_movedestination() {}\n  }, {\n    key: 'format_node',\n    value: function format_node(context, delta, left) {\n      // recurse\n      this.formatDeltaChildren(context, delta, left);\n    }\n  }]);\n  return AnnotatedFormatter;\n}(BaseFormatter);\n\n/* eslint-enable camelcase */\n\nvar wrapPropertyName = function wrapPropertyName(name) {\n  return '<pre style=\"display:inline-block\">&quot;' + name + '&quot;</pre>';\n};\n\nvar deltaAnnotations = {\n  added: function added(delta, left, key, leftKey) {\n    var formatLegend = ' <pre>([newValue])</pre>';\n    if (typeof leftKey === 'undefined') {\n      return 'new value' + formatLegend;\n    }\n    if (typeof leftKey === 'number') {\n      return 'insert at index ' + leftKey + formatLegend;\n    }\n    return 'add property ' + wrapPropertyName(leftKey) + formatLegend;\n  },\n  modified: function modified(delta, left, key, leftKey) {\n    var formatLegend = ' <pre>([previousValue, newValue])</pre>';\n    if (typeof leftKey === 'undefined') {\n      return 'modify value' + formatLegend;\n    }\n    if (typeof leftKey === 'number') {\n      return 'modify at index ' + leftKey + formatLegend;\n    }\n    return 'modify property ' + wrapPropertyName(leftKey) + formatLegend;\n  },\n  deleted: function deleted(delta, left, key, leftKey) {\n    var formatLegend = ' <pre>([previousValue, 0, 0])</pre>';\n    if (typeof leftKey === 'undefined') {\n      return 'delete value' + formatLegend;\n    }\n    if (typeof leftKey === 'number') {\n      return 'remove index ' + leftKey + formatLegend;\n    }\n    return 'delete property ' + wrapPropertyName(leftKey) + formatLegend;\n  },\n  moved: function moved(delta, left, key, leftKey) {\n    return 'move from <span title=\"(position to remove at original state)\">' + ('index ' + leftKey + '</span> to <span title=\"(position to insert at final') + (' state)\">index ' + delta[1] + '</span>');\n  },\n  textdiff: function textdiff(delta, left, key, leftKey) {\n    var location = typeof leftKey === 'undefined' ? '' : typeof leftKey === 'number' ? ' at index ' + leftKey : ' at property ' + wrapPropertyName(leftKey);\n    return 'text diff' + location + ', format is <a href=\"https://code.google.com/' + 'p/google-diff-match-patch/wiki/Unidiff\">a variation of Unidiff</a>';\n  }\n};\n\nvar formatAnyChange = function formatAnyChange(context, delta) {\n  var deltaType = this.getDeltaType(delta);\n  var annotator = deltaAnnotations[deltaType];\n  var htmlNote = annotator && annotator.apply(annotator, Array.prototype.slice.call(arguments, 1));\n  var json = JSON.stringify(delta, null, 2);\n  if (deltaType === 'textdiff') {\n    // split text diffs lines\n    json = json.split('\\\\n').join('\\\\n\"+\\n   \"');\n  }\n  context.indent();\n  context.row(json, htmlNote);\n  context.indent(-1);\n};\n\n/* eslint-disable camelcase */\nAnnotatedFormatter.prototype.format_added = formatAnyChange;\nAnnotatedFormatter.prototype.format_modified = formatAnyChange;\nAnnotatedFormatter.prototype.format_deleted = formatAnyChange;\nAnnotatedFormatter.prototype.format_moved = formatAnyChange;\nAnnotatedFormatter.prototype.format_textdiff = formatAnyChange;\nvar defaultInstance$1 = void 0;\n\nfunction format$1(delta, left) {\n  if (!defaultInstance$1) {\n    defaultInstance$1 = new AnnotatedFormatter();\n  }\n  return defaultInstance$1.format(delta, left);\n}\n\n\n\nvar annotated = Object.freeze({\n\tdefault: AnnotatedFormatter,\n\tformat: format$1\n});\n\nvar OPERATIONS = {\n  add: 'add',\n  remove: 'remove',\n  replace: 'replace',\n  move: 'move'\n};\n\nvar JSONFormatter = function (_BaseFormatter) {\n  inherits(JSONFormatter, _BaseFormatter);\n\n  function JSONFormatter() {\n    classCallCheck(this, JSONFormatter);\n\n    var _this = possibleConstructorReturn(this, (JSONFormatter.__proto__ || Object.getPrototypeOf(JSONFormatter)).call(this));\n\n    _this.includeMoveDestinations = true;\n    return _this;\n  }\n\n  createClass(JSONFormatter, [{\n    key: 'prepareContext',\n    value: function prepareContext(context) {\n      get(JSONFormatter.prototype.__proto__ || Object.getPrototypeOf(JSONFormatter.prototype), 'prepareContext', this).call(this, context);\n      context.result = [];\n      context.path = [];\n      context.pushCurrentOp = function (obj) {\n        var op = obj.op,\n            value = obj.value;\n\n        var val = {\n          op: op,\n          path: this.currentPath()\n        };\n        if (typeof value !== 'undefined') {\n          val.value = value;\n        }\n        this.result.push(val);\n      };\n\n      context.pushMoveOp = function (to) {\n        var from = this.currentPath();\n        this.result.push({\n          op: OPERATIONS.move,\n          from: from,\n          path: this.toPath(to)\n        });\n      };\n\n      context.currentPath = function () {\n        return '/' + this.path.join('/');\n      };\n\n      context.toPath = function (toPath) {\n        var to = this.path.slice();\n        to[to.length - 1] = toPath;\n        return '/' + to.join('/');\n      };\n    }\n  }, {\n    key: 'typeFormattterErrorFormatter',\n    value: function typeFormattterErrorFormatter(context, err) {\n      context.out('[ERROR] ' + err);\n    }\n  }, {\n    key: 'rootBegin',\n    value: function rootBegin() {}\n  }, {\n    key: 'rootEnd',\n    value: function rootEnd() {}\n  }, {\n    key: 'nodeBegin',\n    value: function nodeBegin(_ref, key, leftKey) {\n      var path = _ref.path;\n\n      path.push(leftKey);\n    }\n  }, {\n    key: 'nodeEnd',\n    value: function nodeEnd(_ref2) {\n      var path = _ref2.path;\n\n      path.pop();\n    }\n\n    /* jshint camelcase: false */\n    /* eslint-disable camelcase */\n\n  }, {\n    key: 'format_unchanged',\n    value: function format_unchanged() {}\n  }, {\n    key: 'format_movedestination',\n    value: function format_movedestination() {}\n  }, {\n    key: 'format_node',\n    value: function format_node(context, delta, left) {\n      this.formatDeltaChildren(context, delta, left);\n    }\n  }, {\n    key: 'format_added',\n    value: function format_added(context, delta) {\n      context.pushCurrentOp({ op: OPERATIONS.add, value: delta[0] });\n    }\n  }, {\n    key: 'format_modified',\n    value: function format_modified(context, delta) {\n      context.pushCurrentOp({ op: OPERATIONS.replace, value: delta[1] });\n    }\n  }, {\n    key: 'format_deleted',\n    value: function format_deleted(context) {\n      context.pushCurrentOp({ op: OPERATIONS.remove });\n    }\n  }, {\n    key: 'format_moved',\n    value: function format_moved(context, delta) {\n      var to = delta[1];\n      context.pushMoveOp(to);\n    }\n  }, {\n    key: 'format_textdiff',\n    value: function format_textdiff() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: 'format',\n    value: function format(delta, left) {\n      var context = {};\n      this.prepareContext(context);\n      this.recurse(context, delta, left);\n      return context.result;\n    }\n  }]);\n  return JSONFormatter;\n}(BaseFormatter);\n\nvar last = function last(arr) {\n  return arr[arr.length - 1];\n};\n\nvar sortBy = function sortBy(arr, pred) {\n  arr.sort(pred);\n  return arr;\n};\n\nvar compareByIndexDesc = function compareByIndexDesc(indexA, indexB) {\n  var lastA = parseInt(indexA, 10);\n  var lastB = parseInt(indexB, 10);\n  if (!(isNaN(lastA) || isNaN(lastB))) {\n    return lastB - lastA;\n  } else {\n    return 0;\n  }\n};\n\nvar opsByDescendingOrder = function opsByDescendingOrder(removeOps) {\n  return sortBy(removeOps, function (a, b) {\n    var splitA = a.path.split('/');\n    var splitB = b.path.split('/');\n    if (splitA.length !== splitB.length) {\n      return splitA.length - splitB.length;\n    } else {\n      return compareByIndexDesc(last(splitA), last(splitB));\n    }\n  });\n};\n\nvar partitionOps = function partitionOps(arr, fns) {\n  var initArr = Array(fns.length + 1).fill().map(function () {\n    return [];\n  });\n  return arr.map(function (item) {\n    var position = fns.map(function (fn) {\n      return fn(item);\n    }).indexOf(true);\n    if (position < 0) {\n      position = fns.length;\n    }\n    return { item: item, position: position };\n  }).reduce(function (acc, item) {\n    acc[item.position].push(item.item);\n    return acc;\n  }, initArr);\n};\nvar isMoveOp = function isMoveOp(_ref3) {\n  var op = _ref3.op;\n  return op === 'move';\n};\nvar isRemoveOp = function isRemoveOp(_ref4) {\n  var op = _ref4.op;\n  return op === 'remove';\n};\n\nvar reorderOps = function reorderOps(diff) {\n  var _partitionOps = partitionOps(diff, [isMoveOp, isRemoveOp]),\n      _partitionOps2 = slicedToArray(_partitionOps, 3),\n      moveOps = _partitionOps2[0],\n      removedOps = _partitionOps2[1],\n      restOps = _partitionOps2[2];\n\n  var removeOpsReverse = opsByDescendingOrder(removedOps);\n  return [].concat(toConsumableArray(removeOpsReverse), toConsumableArray(moveOps), toConsumableArray(restOps));\n};\n\nvar defaultInstance$2 = void 0;\n\nvar format$2 = function format(delta, left) {\n  if (!defaultInstance$2) {\n    defaultInstance$2 = new JSONFormatter();\n  }\n  return reorderOps(defaultInstance$2.format(delta, left));\n};\n\nvar log = function log(delta, left) {\n  console.log(format$2(delta, left));\n};\n\n\n\nvar jsonpatch = Object.freeze({\n\tdefault: JSONFormatter,\n\tpartitionOps: partitionOps,\n\tformat: format$2,\n\tlog: log\n});\n\nfunction chalkColor(name) {\n  return chalk && chalk[name] || function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return args;\n  };\n}\n\nvar colors = {\n  added: chalkColor('green'),\n  deleted: chalkColor('red'),\n  movedestination: chalkColor('gray'),\n  moved: chalkColor('yellow'),\n  unchanged: chalkColor('gray'),\n  error: chalkColor('white.bgRed'),\n  textDiffLine: chalkColor('gray')\n};\n\nvar ConsoleFormatter = function (_BaseFormatter) {\n  inherits(ConsoleFormatter, _BaseFormatter);\n\n  function ConsoleFormatter() {\n    classCallCheck(this, ConsoleFormatter);\n\n    var _this = possibleConstructorReturn(this, (ConsoleFormatter.__proto__ || Object.getPrototypeOf(ConsoleFormatter)).call(this));\n\n    _this.includeMoveDestinations = false;\n    return _this;\n  }\n\n  createClass(ConsoleFormatter, [{\n    key: 'prepareContext',\n    value: function prepareContext(context) {\n      get(ConsoleFormatter.prototype.__proto__ || Object.getPrototypeOf(ConsoleFormatter.prototype), 'prepareContext', this).call(this, context);\n      context.indent = function (levels) {\n        this.indentLevel = (this.indentLevel || 0) + (typeof levels === 'undefined' ? 1 : levels);\n        this.indentPad = new Array(this.indentLevel + 1).join('  ');\n        this.outLine();\n      };\n      context.outLine = function () {\n        this.buffer.push('\\n' + (this.indentPad || ''));\n      };\n      context.out = function () {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        for (var i = 0, l = args.length; i < l; i++) {\n          var lines = args[i].split('\\n');\n          var text = lines.join('\\n' + (this.indentPad || ''));\n          if (this.color && this.color[0]) {\n            text = this.color[0](text);\n          }\n          this.buffer.push(text);\n        }\n      };\n      context.pushColor = function (color) {\n        this.color = this.color || [];\n        this.color.unshift(color);\n      };\n      context.popColor = function () {\n        this.color = this.color || [];\n        this.color.shift();\n      };\n    }\n  }, {\n    key: 'typeFormattterErrorFormatter',\n    value: function typeFormattterErrorFormatter(context, err) {\n      context.pushColor(colors.error);\n      context.out('[ERROR]' + err);\n      context.popColor();\n    }\n  }, {\n    key: 'formatValue',\n    value: function formatValue(context, value) {\n      context.out(JSON.stringify(value, null, 2));\n    }\n  }, {\n    key: 'formatTextDiffString',\n    value: function formatTextDiffString(context, value) {\n      var lines = this.parseTextDiff(value);\n      context.indent();\n      for (var i = 0, l = lines.length; i < l; i++) {\n        var line = lines[i];\n        context.pushColor(colors.textDiffLine);\n        context.out(line.location.line + ',' + line.location.chr + ' ');\n        context.popColor();\n        var pieces = line.pieces;\n        for (var pieceIndex = 0, piecesLength = pieces.length; pieceIndex < piecesLength; pieceIndex++) {\n          var piece = pieces[pieceIndex];\n          context.pushColor(colors[piece.type]);\n          context.out(piece.text);\n          context.popColor();\n        }\n        if (i < l - 1) {\n          context.outLine();\n        }\n      }\n      context.indent(-1);\n    }\n  }, {\n    key: 'rootBegin',\n    value: function rootBegin(context, type, nodeType) {\n      context.pushColor(colors[type]);\n      if (type === 'node') {\n        context.out(nodeType === 'array' ? '[' : '{');\n        context.indent();\n      }\n    }\n  }, {\n    key: 'rootEnd',\n    value: function rootEnd(context, type, nodeType) {\n      if (type === 'node') {\n        context.indent(-1);\n        context.out(nodeType === 'array' ? ']' : '}');\n      }\n      context.popColor();\n    }\n  }, {\n    key: 'nodeBegin',\n    value: function nodeBegin(context, key, leftKey, type, nodeType) {\n      context.pushColor(colors[type]);\n      context.out(leftKey + ': ');\n      if (type === 'node') {\n        context.out(nodeType === 'array' ? '[' : '{');\n        context.indent();\n      }\n    }\n  }, {\n    key: 'nodeEnd',\n    value: function nodeEnd(context, key, leftKey, type, nodeType, isLast) {\n      if (type === 'node') {\n        context.indent(-1);\n        context.out(nodeType === 'array' ? ']' : '}' + (isLast ? '' : ','));\n      }\n      if (!isLast) {\n        context.outLine();\n      }\n      context.popColor();\n    }\n\n    /* jshint camelcase: false */\n    /* eslint-disable camelcase */\n\n  }, {\n    key: 'format_unchanged',\n    value: function format_unchanged(context, delta, left) {\n      if (typeof left === 'undefined') {\n        return;\n      }\n      this.formatValue(context, left);\n    }\n  }, {\n    key: 'format_movedestination',\n    value: function format_movedestination(context, delta, left) {\n      if (typeof left === 'undefined') {\n        return;\n      }\n      this.formatValue(context, left);\n    }\n  }, {\n    key: 'format_node',\n    value: function format_node(context, delta, left) {\n      // recurse\n      this.formatDeltaChildren(context, delta, left);\n    }\n  }, {\n    key: 'format_added',\n    value: function format_added(context, delta) {\n      this.formatValue(context, delta[0]);\n    }\n  }, {\n    key: 'format_modified',\n    value: function format_modified(context, delta) {\n      context.pushColor(colors.deleted);\n      this.formatValue(context, delta[0]);\n      context.popColor();\n      context.out(' => ');\n      context.pushColor(colors.added);\n      this.formatValue(context, delta[1]);\n      context.popColor();\n    }\n  }, {\n    key: 'format_deleted',\n    value: function format_deleted(context, delta) {\n      this.formatValue(context, delta[0]);\n    }\n  }, {\n    key: 'format_moved',\n    value: function format_moved(context, delta) {\n      context.out('==> ' + delta[1]);\n    }\n  }, {\n    key: 'format_textdiff',\n    value: function format_textdiff(context, delta) {\n      this.formatTextDiffString(context, delta[0]);\n    }\n  }]);\n  return ConsoleFormatter;\n}(BaseFormatter);\n\nvar defaultInstance$3 = void 0;\n\nvar format$3 = function format(delta, left) {\n  if (!defaultInstance$3) {\n    defaultInstance$3 = new ConsoleFormatter();\n  }\n  return defaultInstance$3.format(delta, left);\n};\n\nfunction log$1(delta, left) {\n  console.log(format$3(delta, left));\n}\n\n\n\nvar console$1 = Object.freeze({\n\tdefault: ConsoleFormatter,\n\tformat: format$3,\n\tlog: log$1\n});\n\n\n\nvar index = Object.freeze({\n\tbase: base,\n\thtml: html,\n\tannotated: annotated,\n\tjsonpatch: jsonpatch,\n\tconsole: console$1\n});\n\n// use as 2nd parameter for JSON.parse to revive Date instances\nfunction dateReviver(key, value) {\n  var parts = void 0;\n  if (typeof value === 'string') {\n    // eslint-disable-next-line max-len\n    parts = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d*))?(Z|([+-])(\\d{2}):(\\d{2}))$/.exec(value);\n    if (parts) {\n      return new Date(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4], +parts[5], +parts[6], +(parts[7] || 0)));\n    }\n  }\n  return value;\n}\n\nfunction create(options) {\n  return new DiffPatcher(options);\n}\n\nvar defaultInstance$4 = void 0;\n\nfunction diff() {\n  if (!defaultInstance$4) {\n    defaultInstance$4 = new DiffPatcher();\n  }\n  return defaultInstance$4.diff.apply(defaultInstance$4, arguments);\n}\n\nfunction patch() {\n  if (!defaultInstance$4) {\n    defaultInstance$4 = new DiffPatcher();\n  }\n  return defaultInstance$4.patch.apply(defaultInstance$4, arguments);\n}\n\nfunction unpatch() {\n  if (!defaultInstance$4) {\n    defaultInstance$4 = new DiffPatcher();\n  }\n  return defaultInstance$4.unpatch.apply(defaultInstance$4, arguments);\n}\n\nfunction reverse() {\n  if (!defaultInstance$4) {\n    defaultInstance$4 = new DiffPatcher();\n  }\n  return defaultInstance$4.reverse.apply(defaultInstance$4, arguments);\n}\n\nfunction clone$1() {\n  if (!defaultInstance$4) {\n    defaultInstance$4 = new DiffPatcher();\n  }\n  return defaultInstance$4.clone.apply(defaultInstance$4, arguments);\n}\n\nexports.DiffPatcher = DiffPatcher;\nexports.formatters = index;\nexports.console = console$1;\nexports.create = create;\nexports.dateReviver = dateReviver;\nexports.diff = diff;\nexports.patch = patch;\nexports.unpatch = unpatch;\nexports.reverse = reverse;\nexports.clone = clone$1;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n", "export * from './live_json';\n", "import { PatchError, _deepClone, isInteger, unescapePathComponent, hasUndefined } from './helpers.mjs';\nexport var JsonPatchError = PatchError;\nexport var deepClone = _deepClone;\n/* We use a Javascript hash to store each\n function. Each hash entry (property) uses\n the operation identifiers specified in rfc6902.\n In this way, we can map each patch operation\n to its dedicated function in efficient way.\n */\n/* The operations applicable to an object */\nvar objOps = {\n    add: function (obj, key, document) {\n        obj[key] = this.value;\n        return { newDocument: document };\n    },\n    remove: function (obj, key, document) {\n        var removed = obj[key];\n        delete obj[key];\n        return { newDocument: document, removed: removed };\n    },\n    replace: function (obj, key, document) {\n        var removed = obj[key];\n        obj[key] = this.value;\n        return { newDocument: document, removed: removed };\n    },\n    move: function (obj, key, document) {\n        /* in case move target overwrites an existing value,\n        return the removed value, this can be taxing performance-wise,\n        and is potentially unneeded */\n        var removed = getValueByPointer(document, this.path);\n        if (removed) {\n            removed = _deepClone(removed);\n        }\n        var originalValue = applyOperation(document, { op: \"remove\", path: this.from }).removed;\n        applyOperation(document, { op: \"add\", path: this.path, value: originalValue });\n        return { newDocument: document, removed: removed };\n    },\n    copy: function (obj, key, document) {\n        var valueToCopy = getValueByPointer(document, this.from);\n        // enforce copy by value so further operations don't affect source (see issue #177)\n        applyOperation(document, { op: \"add\", path: this.path, value: _deepClone(valueToCopy) });\n        return { newDocument: document };\n    },\n    test: function (obj, key, document) {\n        return { newDocument: document, test: _areEquals(obj[key], this.value) };\n    },\n    _get: function (obj, key, document) {\n        this.value = obj[key];\n        return { newDocument: document };\n    }\n};\n/* The operations applicable to an array. Many are the same as for the object */\nvar arrOps = {\n    add: function (arr, i, document) {\n        if (isInteger(i)) {\n            arr.splice(i, 0, this.value);\n        }\n        else { // array props\n            arr[i] = this.value;\n        }\n        // this may be needed when using '-' in an array\n        return { newDocument: document, index: i };\n    },\n    remove: function (arr, i, document) {\n        var removedList = arr.splice(i, 1);\n        return { newDocument: document, removed: removedList[0] };\n    },\n    replace: function (arr, i, document) {\n        var removed = arr[i];\n        arr[i] = this.value;\n        return { newDocument: document, removed: removed };\n    },\n    move: objOps.move,\n    copy: objOps.copy,\n    test: objOps.test,\n    _get: objOps._get\n};\n/**\n * Retrieves a value from a JSON document by a JSON pointer.\n * Returns the value.\n *\n * @param document The document to get the value from\n * @param pointer an escaped JSON pointer\n * @return The retrieved value\n */\nexport function getValueByPointer(document, pointer) {\n    if (pointer == '') {\n        return document;\n    }\n    var getOriginalDestination = { op: \"_get\", path: pointer };\n    applyOperation(document, getOriginalDestination);\n    return getOriginalDestination.value;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the {newDocument, result} of the operation.\n * It modifies the `document` and `operation` objects - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return `{newDocument, result}` after the operation\n */\nexport function applyOperation(document, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {\n    if (validateOperation === void 0) { validateOperation = false; }\n    if (mutateDocument === void 0) { mutateDocument = true; }\n    if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }\n    if (index === void 0) { index = 0; }\n    if (validateOperation) {\n        if (typeof validateOperation == 'function') {\n            validateOperation(operation, 0, document, operation.path);\n        }\n        else {\n            validator(operation, 0);\n        }\n    }\n    /* ROOT OPERATIONS */\n    if (operation.path === \"\") {\n        var returnValue = { newDocument: document };\n        if (operation.op === 'add') {\n            returnValue.newDocument = operation.value;\n            return returnValue;\n        }\n        else if (operation.op === 'replace') {\n            returnValue.newDocument = operation.value;\n            returnValue.removed = document; //document we removed\n            return returnValue;\n        }\n        else if (operation.op === 'move' || operation.op === 'copy') { // it's a move or copy to root\n            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\n            if (operation.op === 'move') { // report removed item\n                returnValue.removed = document;\n            }\n            return returnValue;\n        }\n        else if (operation.op === 'test') {\n            returnValue.test = _areEquals(document, operation.value);\n            if (returnValue.test === false) {\n                throw new JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n            }\n            returnValue.newDocument = document;\n            return returnValue;\n        }\n        else if (operation.op === 'remove') { // a remove on root\n            returnValue.removed = document;\n            returnValue.newDocument = null;\n            return returnValue;\n        }\n        else if (operation.op === '_get') {\n            operation.value = document;\n            return returnValue;\n        }\n        else { /* bad operation */\n            if (validateOperation) {\n                throw new JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);\n            }\n            else {\n                return returnValue;\n            }\n        }\n    } /* END ROOT OPERATIONS */\n    else {\n        if (!mutateDocument) {\n            document = _deepClone(document);\n        }\n        var path = operation.path || \"\";\n        var keys = path.split('/');\n        var obj = document;\n        var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\n        var len = keys.length;\n        var existingPathFragment = undefined;\n        var key = void 0;\n        var validateFunction = void 0;\n        if (typeof validateOperation == 'function') {\n            validateFunction = validateOperation;\n        }\n        else {\n            validateFunction = validator;\n        }\n        while (true) {\n            key = keys[t];\n            if (key && key.indexOf('~') != -1) {\n                key = unescapePathComponent(key);\n            }\n            if (banPrototypeModifications &&\n                (key == '__proto__' ||\n                    (key == 'prototype' && t > 0 && keys[t - 1] == 'constructor'))) {\n                throw new TypeError('JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README');\n            }\n            if (validateOperation) {\n                if (existingPathFragment === undefined) {\n                    if (obj[key] === undefined) {\n                        existingPathFragment = keys.slice(0, t).join('/');\n                    }\n                    else if (t == len - 1) {\n                        existingPathFragment = operation.path;\n                    }\n                    if (existingPathFragment !== undefined) {\n                        validateFunction(operation, 0, document, existingPathFragment);\n                    }\n                }\n            }\n            t++;\n            if (Array.isArray(obj)) {\n                if (key === '-') {\n                    key = obj.length;\n                }\n                else {\n                    if (validateOperation && !isInteger(key)) {\n                        throw new JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", index, operation, document);\n                    } // only parse key when it's an integer for `arr.prop` to work\n                    else if (isInteger(key)) {\n                        key = ~~key;\n                    }\n                }\n                if (t >= len) {\n                    if (validateOperation && operation.op === \"add\" && key > obj.length) {\n                        throw new JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", index, operation, document);\n                    }\n                    var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            else {\n                if (t >= len) {\n                    var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            obj = obj[key];\n            // If we have more keys in the path, but the next value isn't a non-null object,\n            // throw an OPERATION_PATH_UNRESOLVABLE error instead of iterating again.\n            if (validateOperation && t < len && (!obj || typeof obj !== \"object\")) {\n                throw new JsonPatchError('Cannot perform operation at the desired path', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Apply a full JSON Patch array on a JSON document.\n * Returns the {newDocument, result} of the patch.\n * It modifies the `document` object and `patch` - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\n *\n * @param document The document to patch\n * @param patch The patch to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return An array of `{newDocument, result}` after the patch\n */\nexport function applyPatch(document, patch, validateOperation, mutateDocument, banPrototypeModifications) {\n    if (mutateDocument === void 0) { mutateDocument = true; }\n    if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }\n    if (validateOperation) {\n        if (!Array.isArray(patch)) {\n            throw new JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\n        }\n    }\n    if (!mutateDocument) {\n        document = _deepClone(document);\n    }\n    var results = new Array(patch.length);\n    for (var i = 0, length_1 = patch.length; i < length_1; i++) {\n        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`\n        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);\n        document = results[i].newDocument; // in case root was replaced\n    }\n    results.newDocument = document;\n    return results;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the updated document.\n * Suitable as a reducer.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @return The updated document\n */\nexport function applyReducer(document, operation, index) {\n    var operationResult = applyOperation(document, operation);\n    if (operationResult.test === false) { // failed test\n        throw new JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n    }\n    return operationResult.newDocument;\n}\n/**\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\n * @param {object} operation - operation object (patch)\n * @param {number} index - index of operation in the sequence\n * @param {object} [document] - object where the operation is supposed to be applied\n * @param {string} [existingPathFragment] - comes along with `document`\n */\nexport function validator(operation, index, document, existingPathFragment) {\n    if (typeof operation !== 'object' || operation === null || Array.isArray(operation)) {\n        throw new JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);\n    }\n    else if (!objOps[operation.op]) {\n        throw new JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);\n    }\n    else if (typeof operation.path !== 'string') {\n        throw new JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);\n    }\n    else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {\n        // paths that aren't empty string should start with \"/\"\n        throw new JsonPatchError('Operation `path` property must start with \"/\"', 'OPERATION_PATH_INVALID', index, operation, document);\n    }\n    else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {\n        throw new JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);\n    }\n    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {\n        throw new JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);\n    }\n    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && hasUndefined(operation.value)) {\n        throw new JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);\n    }\n    else if (document) {\n        if (operation.op == \"add\") {\n            var pathLen = operation.path.split(\"/\").length;\n            var existingPathLen = existingPathFragment.split(\"/\").length;\n            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\n                throw new JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);\n            }\n        }\n        else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {\n            if (operation.path !== existingPathFragment) {\n                throw new JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);\n            }\n        }\n        else if (operation.op === 'move' || operation.op === 'copy') {\n            var existingValue = { op: \"_get\", path: operation.from, value: undefined };\n            var error = validate([existingValue], document);\n            if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {\n                throw new JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\n * If error is encountered, returns a JsonPatchError object\n * @param sequence\n * @param document\n * @returns {JsonPatchError|undefined}\n */\nexport function validate(sequence, document, externalValidator) {\n    try {\n        if (!Array.isArray(sequence)) {\n            throw new JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\n        }\n        if (document) {\n            //clone document and sequence so that we can safely try applying operations\n            applyPatch(_deepClone(document), _deepClone(sequence), externalValidator || true);\n        }\n        else {\n            externalValidator = externalValidator || validator;\n            for (var i = 0; i < sequence.length; i++) {\n                externalValidator(sequence[i], i, document, undefined);\n            }\n        }\n    }\n    catch (e) {\n        if (e instanceof JsonPatchError) {\n            return e;\n        }\n        else {\n            throw e;\n        }\n    }\n}\n// based on https://github.com/epoberezkin/fast-deep-equal\n// MIT License\n// Copyright (c) 2017 Evgeny Poberezkin\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nexport function _areEquals(a, b) {\n    if (a === b)\n        return true;\n    if (a && b && typeof a == 'object' && typeof b == 'object') {\n        var arrA = Array.isArray(a), arrB = Array.isArray(b), i, length, key;\n        if (arrA && arrB) {\n            length = a.length;\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (!_areEquals(a[i], b[i]))\n                    return false;\n            return true;\n        }\n        if (arrA != arrB)\n            return false;\n        var keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length)\n            return false;\n        for (i = length; i-- !== 0;)\n            if (!b.hasOwnProperty(keys[i]))\n                return false;\n        for (i = length; i-- !== 0;) {\n            key = keys[i];\n            if (!_areEquals(a[key], b[key]))\n                return false;\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\n;\n", "/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017-2022 Joachim Wester\n * MIT licensed\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function hasOwnProperty(obj, key) {\n    return _hasOwnProperty.call(obj, key);\n}\nexport function _objectKeys(obj) {\n    if (Array.isArray(obj)) {\n        var keys_1 = new Array(obj.length);\n        for (var k = 0; k < keys_1.length; k++) {\n            keys_1[k] = \"\" + k;\n        }\n        return keys_1;\n    }\n    if (Object.keys) {\n        return Object.keys(obj);\n    }\n    var keys = [];\n    for (var i in obj) {\n        if (hasOwnProperty(obj, i)) {\n            keys.push(i);\n        }\n    }\n    return keys;\n}\n;\n/**\n* Deeply clone the object.\n* https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)\n* @param  {any} obj value to clone\n* @return {any} cloned obj\n*/\nexport function _deepClone(obj) {\n    switch (typeof obj) {\n        case \"object\":\n            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5\n        case \"undefined\":\n            return null; //this is how JSON.stringify behaves for array items\n        default:\n            return obj; //no need to clone primitives\n    }\n}\n//3x faster than cached /^\\d+$/.test(str)\nexport function isInteger(str) {\n    var i = 0;\n    var len = str.length;\n    var charCode;\n    while (i < len) {\n        charCode = str.charCodeAt(i);\n        if (charCode >= 48 && charCode <= 57) {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\n/**\n* Escapes a json pointer path\n* @param path The raw pointer\n* @return the Escaped path\n*/\nexport function escapePathComponent(path) {\n    if (path.indexOf('/') === -1 && path.indexOf('~') === -1)\n        return path;\n    return path.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n/**\n * Unescapes a json pointer path\n * @param path The escaped pointer\n * @return The unescaped path\n */\nexport function unescapePathComponent(path) {\n    return path.replace(/~1/g, '/').replace(/~0/g, '~');\n}\nexport function _getPathRecursive(root, obj) {\n    var found;\n    for (var key in root) {\n        if (hasOwnProperty(root, key)) {\n            if (root[key] === obj) {\n                return escapePathComponent(key) + '/';\n            }\n            else if (typeof root[key] === 'object') {\n                found = _getPathRecursive(root[key], obj);\n                if (found != '') {\n                    return escapePathComponent(key) + '/' + found;\n                }\n            }\n        }\n    }\n    return '';\n}\nexport function getPath(root, obj) {\n    if (root === obj) {\n        return '/';\n    }\n    var path = _getPathRecursive(root, obj);\n    if (path === '') {\n        throw new Error(\"Object not found in root\");\n    }\n    return \"/\" + path;\n}\n/**\n* Recursively checks whether an object has any undefined values inside.\n*/\nexport function hasUndefined(obj) {\n    if (obj === undefined) {\n        return true;\n    }\n    if (obj) {\n        if (Array.isArray(obj)) {\n            for (var i_1 = 0, len = obj.length; i_1 < len; i_1++) {\n                if (hasUndefined(obj[i_1])) {\n                    return true;\n                }\n            }\n        }\n        else if (typeof obj === \"object\") {\n            var objKeys = _objectKeys(obj);\n            var objKeysLength = objKeys.length;\n            for (var i = 0; i < objKeysLength; i++) {\n                if (hasUndefined(obj[objKeys[i]])) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction patchErrorMessageFormatter(message, args) {\n    var messageParts = [message];\n    for (var key in args) {\n        var value = typeof args[key] === 'object' ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print\n        if (typeof value !== 'undefined') {\n            messageParts.push(key + \": \" + value);\n        }\n    }\n    return messageParts.join('\\n');\n}\nvar PatchError = /** @class */ (function (_super) {\n    __extends(PatchError, _super);\n    function PatchError(message, name, index, operation, tree) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree })) || this;\n        _this.name = name;\n        _this.index = index;\n        _this.operation = operation;\n        _this.tree = tree;\n        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359\n        _this.message = patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree });\n        return _this;\n    }\n    return PatchError;\n}(Error));\nexport { PatchError };\n", "/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017-2021 Joachim Wester\n * MIT license\n */\nimport { _deepClone, _objectKeys, escapePathComponent, hasOwnProperty } from './helpers.mjs';\nimport { applyPatch } from './core.mjs';\nvar beforeDict = new WeakMap();\nvar Mirror = /** @class */ (function () {\n    function Mirror(obj) {\n        this.observers = new Map();\n        this.obj = obj;\n    }\n    return Mirror;\n}());\nvar ObserverInfo = /** @class */ (function () {\n    function ObserverInfo(callback, observer) {\n        this.callback = callback;\n        this.observer = observer;\n    }\n    return ObserverInfo;\n}());\nfunction getMirror(obj) {\n    return beforeDict.get(obj);\n}\nfunction getObserverFromMirror(mirror, callback) {\n    return mirror.observers.get(callback);\n}\nfunction removeObserverFromMirror(mirror, observer) {\n    mirror.observers.delete(observer.callback);\n}\n/**\n * Detach an observer from an object\n */\nexport function unobserve(root, observer) {\n    observer.unobserve();\n}\n/**\n * Observes changes made to an object, which can then be retrieved using generate\n */\nexport function observe(obj, callback) {\n    var patches = [];\n    var observer;\n    var mirror = getMirror(obj);\n    if (!mirror) {\n        mirror = new Mirror(obj);\n        beforeDict.set(obj, mirror);\n    }\n    else {\n        var observerInfo = getObserverFromMirror(mirror, callback);\n        observer = observerInfo && observerInfo.observer;\n    }\n    if (observer) {\n        return observer;\n    }\n    observer = {};\n    mirror.value = _deepClone(obj);\n    if (callback) {\n        observer.callback = callback;\n        observer.next = null;\n        var dirtyCheck = function () {\n            generate(observer);\n        };\n        var fastCheck = function () {\n            clearTimeout(observer.next);\n            observer.next = setTimeout(dirtyCheck);\n        };\n        if (typeof window !== 'undefined') { //not Node\n            window.addEventListener('mouseup', fastCheck);\n            window.addEventListener('keyup', fastCheck);\n            window.addEventListener('mousedown', fastCheck);\n            window.addEventListener('keydown', fastCheck);\n            window.addEventListener('change', fastCheck);\n        }\n    }\n    observer.patches = patches;\n    observer.object = obj;\n    observer.unobserve = function () {\n        generate(observer);\n        clearTimeout(observer.next);\n        removeObserverFromMirror(mirror, observer);\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('mouseup', fastCheck);\n            window.removeEventListener('keyup', fastCheck);\n            window.removeEventListener('mousedown', fastCheck);\n            window.removeEventListener('keydown', fastCheck);\n            window.removeEventListener('change', fastCheck);\n        }\n    };\n    mirror.observers.set(callback, new ObserverInfo(callback, observer));\n    return observer;\n}\n/**\n * Generate an array of patches from an observer\n */\nexport function generate(observer, invertible) {\n    if (invertible === void 0) { invertible = false; }\n    var mirror = beforeDict.get(observer.object);\n    _generate(mirror.value, observer.object, observer.patches, \"\", invertible);\n    if (observer.patches.length) {\n        applyPatch(mirror.value, observer.patches);\n    }\n    var temp = observer.patches;\n    if (temp.length > 0) {\n        observer.patches = [];\n        if (observer.callback) {\n            observer.callback(temp);\n        }\n    }\n    return temp;\n}\n// Dirty check if obj is different from mirror, generate patches and update mirror\nfunction _generate(mirror, obj, patches, path, invertible) {\n    if (obj === mirror) {\n        return;\n    }\n    if (typeof obj.toJSON === \"function\") {\n        obj = obj.toJSON();\n    }\n    var newKeys = _objectKeys(obj);\n    var oldKeys = _objectKeys(mirror);\n    var changed = false;\n    var deleted = false;\n    //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\n    for (var t = oldKeys.length - 1; t >= 0; t--) {\n        var key = oldKeys[t];\n        var oldVal = mirror[key];\n        if (hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n            var newVal = obj[key];\n            if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) {\n                _generate(oldVal, newVal, patches, path + \"/\" + escapePathComponent(key), invertible);\n            }\n            else {\n                if (oldVal !== newVal) {\n                    changed = true;\n                    if (invertible) {\n                        patches.push({ op: \"test\", path: path + \"/\" + escapePathComponent(key), value: _deepClone(oldVal) });\n                    }\n                    patches.push({ op: \"replace\", path: path + \"/\" + escapePathComponent(key), value: _deepClone(newVal) });\n                }\n            }\n        }\n        else if (Array.isArray(mirror) === Array.isArray(obj)) {\n            if (invertible) {\n                patches.push({ op: \"test\", path: path + \"/\" + escapePathComponent(key), value: _deepClone(oldVal) });\n            }\n            patches.push({ op: \"remove\", path: path + \"/\" + escapePathComponent(key) });\n            deleted = true; // property has been deleted\n        }\n        else {\n            if (invertible) {\n                patches.push({ op: \"test\", path: path, value: mirror });\n            }\n            patches.push({ op: \"replace\", path: path, value: obj });\n            changed = true;\n        }\n    }\n    if (!deleted && newKeys.length == oldKeys.length) {\n        return;\n    }\n    for (var t = 0; t < newKeys.length; t++) {\n        var key = newKeys[t];\n        if (!hasOwnProperty(mirror, key) && obj[key] !== undefined) {\n            patches.push({ op: \"add\", path: path + \"/\" + escapePathComponent(key), value: _deepClone(obj[key]) });\n        }\n    }\n}\n/**\n * Create an array of patches from the differences in two objects\n */\nexport function compare(tree1, tree2, invertible) {\n    if (invertible === void 0) { invertible = false; }\n    var patches = [];\n    _generate(tree1, tree2, patches, '', invertible);\n    return patches;\n}\n", "export * from './module/core.mjs';\nexport * from './module/duplex.mjs';\nexport {\n    PatchError as JsonPatchError,\n    _deepClone as deepClone,\n    escapePathComponent,\n    unescapePathComponent\n} from './module/helpers.mjs';\n\n\n/**\n * Default export for backwards compat\n */\n\nimport * as core from './module/core.mjs';\nimport * as duplex from './module/duplex.mjs';\nimport {\n    PatchError as JsonPatchError,\n    _deepClone as deepClone,\n    escapePathComponent,\n    unescapePathComponent\n} from './module/helpers.mjs';\n\nexport default Object.assign({}, core, duplex, {\n    JsonPatchError,\n    deepClone,\n    escapePathComponent,\n    unescapePathComponent\n});", "import * as jsonpatch from 'fast-json-patch';\nimport * as jsondiffpatch from 'jsondiffpatch';\n\n// via https://gist.github.com/jamestowers/40646b505167d88406c1de647ffa3885\nfunction dispatchGlobalEvent(eventName) {\n  let event\n\n  if (typeof window.CustomEvent === 'function') {\n    event = new window.CustomEvent(eventName, { })\n  } else {\n    event = document.createEvent('Event')\n    event.initEvent(eventName, false, true)\n  }\n  window.dispatchEvent(event)\n}\n\nexport function createLiveJsonHooks() {\n  return {\n    LiveJSON: {\n      mounted() {\n\n          /*\n          Patch and Track\n          */\n        \n          this.handleEvent(\"lj:patch\", ({doc_name, patch, method}) => {       \n            if(method == \"rfc\"){\n              window[doc_name] = jsonpatch.applyPatch(window[doc_name], patch).newDocument;\n            } else {\n              window[doc_name] = jsondiffpatch.patch(window[doc_name], patch);\n            }\n\n            dispatchGlobalEvent(doc_name + \"_patched\");\n          });\n\n          this.handleEvent(\"lj:init\", ({doc_name, data}) => {\n            window[doc_name] = data;\n            dispatchGlobalEvent(doc_name + \"_initialized\");\n          });\n\n          /*\n          Local Utilities\n          */\n\n          this.handleEvent(\"lj:assign\", ({doc_name, data}) => {\n            window[doc_name] = data;\n            dispatchGlobalEvent(doc_name + \"_assigned\");\n          });\n\n          this.handleEvent(\"lj:append\", ({doc_name, data}) => {\n            if(!(doc_name in window)){\n              window[doc_name] = [];\n            }\n            window[doc_name].push(data);\n            dispatchGlobalEvent(doc_name + \"_appended\");\n          });\n\n          this.handleEvent(\"lj:put\", ({doc_name, key, value}) => {\n            if(!(doc_name in window)){\n              window[doc_name] = {};\n            }\n            window[doc_name].set(key, value);\n            dispatchGlobalEvent(doc_name + \"_put\");\n          });\n\n          /*\n          Remote Utilities\n          */\n          this.el.addEventListener(\"send_data\", e => {\n            this.pushEvent(e.detail.name, e.detail.data);\n            dispatchGlobalEvent(\"data_sent\");\n            dispatchGlobalEvent(e.detail.name + \"_sent\");\n          });\n\n      }\n    },\n  };\n};\n\nexport function sendData(handler_name, data_to_send, elid = \"lj\"){\n  const ljEvent = new CustomEvent('send_data', {\n    bubbles: true,\n    detail: { \n      name: handler_name,\n      data: data_to_send,\n    }\n  });\n  document.getElementById(elid).dispatchEvent(ljEvent);\n}"],
  "mappings": "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",
  "names": []
}
